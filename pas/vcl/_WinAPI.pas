unit WinAPI;
interface

type
	PHandle = ^THandle;

  WCHAR = WideChar;
  {$EXTERNALSYM WCHAR}
  PWChar = PWideChar;

  LPSTR = PAnsiChar;
  {$EXTERNALSYM LPSTR}
  PLPSTR = ^LPSTR;
  {$EXTERNALSYM PLPSTR}
  LPCSTR = PAnsiChar;
  {$EXTERNALSYM LPCSTR}
  LPCTSTR = {$IFDEF UNICODE}PWideChar{$ELSE}PAnsiChar{$ENDIF};
  {$EXTERNALSYM LPCTSTR}
  LPTSTR = {$IFDEF UNICODE}PWideChar{$ELSE}PAnsiChar{$ENDIF};
  {$EXTERNALSYM LPTSTR}
  LPWSTR = PWideChar;
  {$EXTERNALSYM LPWSTR}
  PLPWSTR = ^LPWSTR;
  {$EXTERNALSYM PLPWSTR}
  LPCWSTR = PWideChar;

	TFileName = type string;

	Char           = AnsiChar;
	PChar          = PAnsiChar;
	va_list        = PChar;
	HINST          = System.HINST;
	HWND           = type LongWord;
	HGDIObj        = type LongWord;
	HDC            = type LongWord;
	HGLRC          = type LongWord;
	HMENU          = type LongWord;
	HICON          = type LongWord;
	HFONT          = type LongWord;
	HCURSOR        = type LongWord;
	HBRUSH         = type LongWord;
	HPEN           = type LongWord;
	HBITMAP        = type LongWord;
	HPALETTE       = type LongWord;
	SHORT          = Smallint;
	ATOM           = Word;
	DWORD          = LongWord;
	UINT           = LongWord;
	PULONG         =^ULONG;
	ULONG          = Cardinal;
	BOOL           = LongBool;
	WPARAM         = Longint;
	LPARAM         = Longint;
	LRESULT        = Longint;
	TColor         = Cardinal; //-$7FFFFFFF-1..$7FFFFFFF;
  LONGLONG = Int64;
  {$EXTERNALSYM LONGLONG}
  PSID = Pointer;
  {$EXTERNALSYM PSID}
  PLargeInteger = ^TLargeInteger;
  _LARGE_INTEGER = record
    case Integer of
    0: (
      LowPart: DWORD;
      HighPart: Longint);
    1: (
      QuadPart: LONGLONG);
  end;
  {$EXTERNALSYM _LARGE_INTEGER}
  {$NODEFINE TLargeInteger}
  TLargeInteger = Int64;
  LARGE_INTEGER = _LARGE_INTEGER;
  {$EXTERNALSYM LARGE_INTEGER}

  DWORDLONG = UInt64;
  {$EXTERNALSYM DWORDLONG}
  ULONGLONG = UInt64;
  {$EXTERNALSYM ULONGLONG}
  ULARGE_INTEGER = record
    case Integer of
    0: (
      LowPart: DWORD;
      HighPart: DWORD);
    1: (
      QuadPart: ULONGLONG);
  end;
  {$EXTERNALSYM ULARGE_INTEGER}
  PULargeInteger = ^TULargeInteger;
  TULargeInteger = ULARGE_INTEGER;

  PFileTime = ^TFileTime;
  _FILETIME = record
    dwLowDateTime: DWORD;
    dwHighDateTime: DWORD;
  end;
  {$EXTERNALSYM _FILETIME}
  TFileTime = _FILETIME;
  FILETIME = _FILETIME;

const
// FSAA settings
	WGL_SAMPLE_BUFFERS_ARB = $2041;
	WGL_SAMPLES_ARB        = $2042;
	WGL_DRAW_TO_WINDOW_ARB = $2001;
	WGL_DRAW_TO_PBUFFER_ARB= $202D;
	WGL_BIND_TO_TEXTURE_RGB_ARB  = $2070;
	WGL_BIND_TO_TEXTURE_RGBA_ARB = $2071;
	WGL_SUPPORT_OPENGL_ARB = $2010;
	WGL_DOUBLE_BUFFER_ARB  = $2011;
	WGL_COLOR_BITS_ARB     = $2014;
	WGL_ACCUM_BITS_ARB     = $201D;
	WGL_DEPTH_BITS_ARB     = $2022;
	WGL_STENCIL_BITS_ARB   = $2023;
	WGL_ALPHA_BITS_ARB     = $201B;

const
	CCHDEVICENAME       = 32;
	CCHFORMNAME         = 32;
	DM_PELSWIDTH        = $80000;
	DM_PELSHEIGHT       = $100000;
	DM_DISPLAYFREQUENCY = $400000;
	DM_BITSPERPEL       = $40000;
	CDS_FULLSCREEN      = $00000004;
	DISP_CHANGE_SUCCESS = 0;
	SC_SCREENSAVE       = 61760;
	SC_MONITORPOWER     = 61808;

const
  VK_LBUTTON = 1;
  {$EXTERNALSYM VK_RBUTTON}
  VK_RBUTTON = 2;
  {$EXTERNALSYM VK_CANCEL}
  VK_CANCEL = 3;
  {$EXTERNALSYM VK_MBUTTON}
  VK_MBUTTON = 4;  { NOT contiguous with L & RBUTTON }
  {$EXTERNALSYM VK_XBUTTON1}
  VK_XBUTTON1 = 5;
  {$EXTERNALSYM VK_XBUTTON2}
  VK_XBUTTON2 = 6;
  {$EXTERNALSYM VK_BACK}
  VK_BACK = 8;
  {$EXTERNALSYM VK_TAB}
  VK_TAB = 9;
  {$EXTERNALSYM VK_CLEAR}
  VK_CLEAR = 12;
  {$EXTERNALSYM VK_RETURN}
  VK_RETURN = 13;
  {$EXTERNALSYM VK_SHIFT}
  VK_SHIFT = $10;
  {$EXTERNALSYM VK_CONTROL}
  VK_CONTROL = 17;
  {$EXTERNALSYM VK_MENU}
  VK_MENU = 18;
  {$EXTERNALSYM VK_PAUSE}
  VK_PAUSE = 19;
  {$EXTERNALSYM VK_CAPITAL}
  VK_CAPITAL = 20;
  {$EXTERNALSYM VK_KANA }
  VK_KANA = 21;
  {$EXTERNALSYM VK_HANGUL }
  VK_HANGUL = 21;
  {$EXTERNALSYM VK_JUNJA }
  VK_JUNJA = 23;
  {$EXTERNALSYM VK_FINAL }
  VK_FINAL = 24;
  {$EXTERNALSYM VK_HANJA }
  VK_HANJA = 25;
  {$EXTERNALSYM VK_KANJI }
  VK_KANJI = 25;
  {$EXTERNALSYM VK_CONVERT }
  VK_CONVERT = 28;
  {$EXTERNALSYM VK_NONCONVERT }
  VK_NONCONVERT = 29;
  {$EXTERNALSYM VK_ACCEPT }
  VK_ACCEPT = 30;
  {$EXTERNALSYM VK_MODECHANGE }
  VK_MODECHANGE = 31;
  {$EXTERNALSYM VK_ESCAPE}
  VK_ESCAPE = 27;
  {$EXTERNALSYM VK_SPACE}
  VK_SPACE = $20;
  {$EXTERNALSYM VK_PRIOR}
  VK_PRIOR = 33;
  {$EXTERNALSYM VK_NEXT}
  VK_NEXT = 34;
  {$EXTERNALSYM VK_END}
  VK_END = 35;
  {$EXTERNALSYM VK_HOME}
  VK_HOME = 36;
  {$EXTERNALSYM VK_LEFT}
  VK_LEFT = 37;
  {$EXTERNALSYM VK_UP}
  VK_UP = 38;
  {$EXTERNALSYM VK_RIGHT}
  VK_RIGHT = 39;
  {$EXTERNALSYM VK_DOWN}
  VK_DOWN = 40;
  {$EXTERNALSYM VK_SELECT}
  VK_SELECT = 41;
  {$EXTERNALSYM VK_PRINT}
  VK_PRINT = 42;
  {$EXTERNALSYM VK_EXECUTE}
  VK_EXECUTE = 43;
  {$EXTERNALSYM VK_SNAPSHOT}
  VK_SNAPSHOT = 44;
  {$EXTERNALSYM VK_INSERT}
  VK_INSERT = 45;
  {$EXTERNALSYM VK_DELETE}
  VK_DELETE = 46;
  {$EXTERNALSYM VK_HELP}
  VK_HELP = 47;
{ VK_0 thru VK_9 are the same as ASCII '0' thru '9' ($30 - $39) }
{ VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' ($41 - $5A) }
  {$EXTERNALSYM VK_LWIN}
  VK_LWIN = 91;
  {$EXTERNALSYM VK_RWIN}
  VK_RWIN = 92;
  {$EXTERNALSYM VK_APPS}
  VK_APPS = 93;
  {$EXTERNALSYM VK_SLEEP}
  VK_SLEEP = 95;
  {$EXTERNALSYM VK_NUMPAD0}
  VK_NUMPAD0 = 96;
  {$EXTERNALSYM VK_NUMPAD1}
  VK_NUMPAD1 = 97;
  {$EXTERNALSYM VK_NUMPAD2}
  VK_NUMPAD2 = 98;
  {$EXTERNALSYM VK_NUMPAD3}
  VK_NUMPAD3 = 99;
  {$EXTERNALSYM VK_NUMPAD4}
  VK_NUMPAD4 = 100;
  {$EXTERNALSYM VK_NUMPAD5}
  VK_NUMPAD5 = 101;
  {$EXTERNALSYM VK_NUMPAD6}
  VK_NUMPAD6 = 102;
  {$EXTERNALSYM VK_NUMPAD7}
  VK_NUMPAD7 = 103;
  {$EXTERNALSYM VK_NUMPAD8}
  VK_NUMPAD8 = 104;
  {$EXTERNALSYM VK_NUMPAD9}
  VK_NUMPAD9 = 105;
  {$EXTERNALSYM VK_MULTIPLY}
  VK_MULTIPLY = 106;
  {$EXTERNALSYM VK_ADD}
  VK_ADD = 107;
  {$EXTERNALSYM VK_SEPARATOR}
  VK_SEPARATOR = 108;
  {$EXTERNALSYM VK_SUBTRACT}
  VK_SUBTRACT = 109;
  {$EXTERNALSYM VK_DECIMAL}
  VK_DECIMAL = 110;
  {$EXTERNALSYM VK_DIVIDE}
  VK_DIVIDE = 111;
  {$EXTERNALSYM VK_F1}
  VK_F1 = 112;
  {$EXTERNALSYM VK_F2}
  VK_F2 = 113;
  {$EXTERNALSYM VK_F3}
  VK_F3 = 114;
  {$EXTERNALSYM VK_F4}
  VK_F4 = 115;
  {$EXTERNALSYM VK_F5}
  VK_F5 = 116;
  {$EXTERNALSYM VK_F6}
  VK_F6 = 117;
  {$EXTERNALSYM VK_F7}
  VK_F7 = 118;
  {$EXTERNALSYM VK_F8}
  VK_F8 = 119;
  {$EXTERNALSYM VK_F9}
  VK_F9 = 120;
  {$EXTERNALSYM VK_F10}
  VK_F10 = 121;
  {$EXTERNALSYM VK_F11}
  VK_F11 = 122;
  {$EXTERNALSYM VK_F12}
  VK_F12 = 123;
  {$EXTERNALSYM VK_F13}
  VK_F13 = 124;
  {$EXTERNALSYM VK_F14}
  VK_F14 = 125;
  {$EXTERNALSYM VK_F15}
  VK_F15 = 126;
  {$EXTERNALSYM VK_F16}
  VK_F16 = 127;
  {$EXTERNALSYM VK_F17}
  VK_F17 = 128;
  {$EXTERNALSYM VK_F18}
  VK_F18 = 129;
  {$EXTERNALSYM VK_F19}
  VK_F19 = 130;
  {$EXTERNALSYM VK_F20}
  VK_F20 = 131;
  {$EXTERNALSYM VK_F21}
  VK_F21 = 132;
  {$EXTERNALSYM VK_F22}
  VK_F22 = 133;
  {$EXTERNALSYM VK_F23}
  VK_F23 = 134;
  {$EXTERNALSYM VK_F24}
  VK_F24 = 135;
  {$EXTERNALSYM VK_NUMLOCK}
  VK_NUMLOCK = 144;
  {$EXTERNALSYM VK_SCROLL}
  VK_SCROLL = 145;
{ VK_L & VK_R - left and right Alt, Ctrl and Shift virtual keys.
  Used only as parameters to GetAsyncKeyState() and GetKeyState().
  No other API or message will distinguish left and right keys in this way. }
  {$EXTERNALSYM VK_LSHIFT}
  VK_LSHIFT = 160;
  {$EXTERNALSYM VK_RSHIFT}
  VK_RSHIFT = 161;
  {$EXTERNALSYM VK_LCONTROL}
  VK_LCONTROL = 162;
  {$EXTERNALSYM VK_RCONTROL}
  VK_RCONTROL = 163;
  {$EXTERNALSYM VK_LMENU}
  VK_LMENU = 164;
  {$EXTERNALSYM VK_RMENU}
  VK_RMENU = 165;

	PFD_DRAW_TO_WINDOW  = $00000004;
	PFD_SUPPORT_OPENGL  = $00000020;
	PFD_DOUBLEBUFFER    = $00000001;
	PFD_MAIN_PLANE      = 0;
	PFD_TYPE_RGBA       = 0;

	WS_VISIBLE          = $10000000;
	WS_CAPTION          = $C00000;      { WS_BORDER or WS_DLGFRAME  }
	WS_BORDER           = $800000;
	WS_SYSMENU          = $80000;
	WS_MINIMIZEBOX      = $20000;
	WS_POPUP            = DWORD($80000000);
	WS_CHILD            = $40000000;
	WS_CLIPSIBLINGS     = $4000000;
	WS_CLIPCHILDREN     = $2000000;

	CS_OWNDC            = $20;

	PM_NOREMOVE         = 0;
	PM_REMOVE           = 1;

	MINCHAR = $80;
  {$EXTERNALSYM MINCHAR}
  MAXCHAR = 127;
  {$EXTERNALSYM MAXCHAR}
  MINSHORT = $8000;
  {$EXTERNALSYM MINSHORT}
  MAXSHORT = 32767;
  {$EXTERNALSYM MAXSHORT}
  MINLONG = DWORD($80000000);
  {$EXTERNALSYM MINLONG}
  MAXLONG = $7FFFFFFF;
  {$EXTERNALSYM MAXLONG}
  MAXBYTE = 255;
  {$EXTERNALSYM MAXBYTE}
  MAXWORD = 65535;
  {$EXTERNALSYM MAXWORD}
  MAXDWORD = DWORD($FFFFFFFF);
  {$EXTERNALSYM MAXDWORD}

	MK_LBUTTON          = 1;
	MK_RBUTTON          = 2;
	MK_SHIFT            = 4;
	MK_CONTROL          = 8;
	MK_MBUTTON          = $10;

  MB_OK = $00000000;
  {$EXTERNALSYM MB_OKCANCEL}
  MB_OKCANCEL = $00000001;
  {$EXTERNALSYM MB_ABORTRETRYIGNORE}
  MB_ABORTRETRYIGNORE = $00000002;
  {$EXTERNALSYM MB_YESNOCANCEL}
  MB_YESNOCANCEL = $00000003;
  {$EXTERNALSYM MB_YESNO}
  MB_YESNO = $00000004;
  {$EXTERNALSYM MB_RETRYCANCEL}
  MB_RETRYCANCEL = $00000005;

  {$EXTERNALSYM MB_ICONHAND}
  MB_ICONHAND = $00000010;
  {$EXTERNALSYM MB_ICONQUESTION}
  MB_ICONQUESTION = $00000020;
  {$EXTERNALSYM MB_ICONEXCLAMATION}
  MB_ICONEXCLAMATION = $00000030;
  {$EXTERNALSYM MB_ICONASTERISK}
  MB_ICONASTERISK = $00000040;
  {$EXTERNALSYM MB_USERICON}
  MB_USERICON = $00000080;
  {$EXTERNALSYM MB_ICONWARNING}
  MB_ICONWARNING                 = MB_ICONEXCLAMATION;
  {$EXTERNALSYM MB_ICONERROR}
  MB_ICONERROR                   = MB_ICONHAND;
  {$EXTERNALSYM MB_ICONINFORMATION}
  MB_ICONINFORMATION             = MB_ICONASTERISK;
  {$EXTERNALSYM MB_ICONSTOP}
  MB_ICONSTOP                    = MB_ICONHAND;

  {$EXTERNALSYM MB_DEFBUTTON1}
  MB_DEFBUTTON1 = $00000000;
  {$EXTERNALSYM MB_DEFBUTTON2}
  MB_DEFBUTTON2 = $00000100;
  {$EXTERNALSYM MB_DEFBUTTON3}
  MB_DEFBUTTON3 = $00000200;
  {$EXTERNALSYM MB_DEFBUTTON4}
  MB_DEFBUTTON4 = $00000300;

  {$EXTERNALSYM MB_APPLMODAL}
  MB_APPLMODAL = $00000000;
  {$EXTERNALSYM MB_SYSTEMMODAL}
  MB_SYSTEMMODAL = $00001000;
  {$EXTERNALSYM MB_TASKMODAL}
  MB_TASKMODAL = $00002000;
  {$EXTERNALSYM MB_HELP}
  MB_HELP = $00004000;                          { Help Button }

  {$EXTERNALSYM MB_NOFOCUS}
  MB_NOFOCUS = $00008000;
  {$EXTERNALSYM MB_SETFOREGROUND}
  MB_SETFOREGROUND = $00010000;
  {$EXTERNALSYM MB_DEFAULT_DESKTOP_ONLY}
  MB_DEFAULT_DESKTOP_ONLY = $00020000;

  {$EXTERNALSYM MB_TOPMOST}
  MB_TOPMOST = $00040000;
  {$EXTERNALSYM MB_RIGHT}
  MB_RIGHT = $00080000;
  {$EXTERNALSYM MB_RTLREADING}
  MB_RTLREADING = $00100000;

  {$EXTERNALSYM MB_SERVICE_NOTIFICATION}
  MB_SERVICE_NOTIFICATION = $00200000;
  {$EXTERNALSYM MB_SERVICE_NOTIFICATION_NT3X}
  MB_SERVICE_NOTIFICATION_NT3X = $00040000;

  {$EXTERNALSYM MB_TYPEMASK}
  MB_TYPEMASK = $0000000F;
  {$EXTERNALSYM MB_ICONMASK}
  MB_ICONMASK = $000000F0;
  {$EXTERNALSYM MB_DEFMASK}
  MB_DEFMASK = $00000F00;
  {$EXTERNALSYM MB_MODEMASK}
  MB_MODEMASK = $00003000;
  {$EXTERNALSYM MB_MISCMASK}
  MB_MISCMASK = $0000C000;

	IDC_ARROW = PAnsiChar(32512);
	IDC_IBEAM = PAnsiChar(32513);
	IDC_WAIT = PAnsiChar(32514);
	IDC_CROSS = PAnsiChar(32515);
	IDC_UPARROW = PAnsiChar(32516);
	IDC_SIZE = PAnsiChar(32640);
	IDC_ICON = PAnsiChar(32641);
	IDC_SIZENWSE = PAnsiChar(32642);
	IDC_SIZENESW = PAnsiChar(32643);
	IDC_SIZEWE = PAnsiChar(32644);
	IDC_SIZENS = PAnsiChar(32645);
	IDC_SIZEALL = PAnsiChar(32646);
	IDC_NO = PAnsiChar(32648);
	IDC_HAND = PAnsiChar(32649);
	IDC_APPSTARTING = PAnsiChar(32650);
	IDC_HELP = PAnsiChar(32651);

  BS_SOLID                = 0;
  {$EXTERNALSYM BS_NULL}
  BS_NULL                 = 1;
  {$EXTERNALSYM BS_HOLLOW}
  BS_HOLLOW               = BS_NULL;
  {$EXTERNALSYM BS_HATCHED}
  BS_HATCHED              = 2;
  {$EXTERNALSYM BS_PATTERN}
  BS_PATTERN              = 3;
  {$EXTERNALSYM BS_INDEXED}
  BS_INDEXED              = 4;
  {$EXTERNALSYM BS_DIBPATTERN}
  BS_DIBPATTERN           = 5;
  {$EXTERNALSYM BS_DIBPATTERNPT}
  BS_DIBPATTERNPT         = 6;
  {$EXTERNALSYM BS_PATTERN8X8}
  BS_PATTERN8X8           = 7;
  {$EXTERNALSYM BS_DIBPATTERN8X8}
  BS_DIBPATTERN8X8        = 8;
  {$EXTERNALSYM BS_MONOPATTERN}
  BS_MONOPATTERN          = 9;

  { Hatch Styles }
  {$EXTERNALSYM HS_HORIZONTAL}
  HS_HORIZONTAL = 0;       { ----- }
  {$EXTERNALSYM HS_VERTICAL}
  HS_VERTICAL   = 1;       { ||||| }
  {$EXTERNALSYM HS_FDIAGONAL}
  HS_FDIAGONAL  = 2;       { ///// }
  {$EXTERNALSYM HS_BDIAGONAL}
  HS_BDIAGONAL  = 3;       { \\\\\ }
  {$EXTERNALSYM HS_CROSS}
  HS_CROSS      = 4;       { +++++ }
  {$EXTERNALSYM HS_DIAGCROSS}
  HS_DIAGCROSS  = 5;       { xxxxx }


  { Pen Styles }
  {$EXTERNALSYM PS_SOLID}
  PS_SOLID       = 0;
  {$EXTERNALSYM PS_DASH}
  PS_DASH        = 1;      { ------- }
  {$EXTERNALSYM PS_DOT}
  PS_DOT         = 2;      { ....... }
  {$EXTERNALSYM PS_DASHDOT}
  PS_DASHDOT     = 3;      { _._._._ }
  {$EXTERNALSYM PS_DASHDOTDOT}
  PS_DASHDOTDOT  = 4;      { _.._.._ }
  {$EXTERNALSYM PS_NULL}
  PS_NULL = 5;
  {$EXTERNALSYM PS_INSIDEFRAME}
  PS_INSIDEFRAME = 6;
  {$EXTERNALSYM PS_USERSTYLE}
  PS_USERSTYLE = 7;
  {$EXTERNALSYM PS_ALTERNATE}
  PS_ALTERNATE = 8;
  {$EXTERNALSYM PS_STYLE_MASK}
  PS_STYLE_MASK = 15;

  {$EXTERNALSYM PS_ENDCAP_ROUND}
  PS_ENDCAP_ROUND = 0;
  {$EXTERNALSYM PS_ENDCAP_SQUARE}
  PS_ENDCAP_SQUARE = $100;
  {$EXTERNALSYM PS_ENDCAP_FLAT}
  PS_ENDCAP_FLAT = $200;
  {$EXTERNALSYM PS_ENDCAP_MASK}
  PS_ENDCAP_MASK = 3840;

  {$EXTERNALSYM PS_JOIN_ROUND}
  PS_JOIN_ROUND = 0;
  {$EXTERNALSYM PS_JOIN_BEVEL}
  PS_JOIN_BEVEL = $1000;
  {$EXTERNALSYM PS_JOIN_MITER}
  PS_JOIN_MITER = $2000;
  {$EXTERNALSYM PS_JOIN_MASK}
  PS_JOIN_MASK = 61440;

  {$EXTERNALSYM PS_COSMETIC}
  PS_COSMETIC = 0;
  {$EXTERNALSYM PS_GEOMETRIC}
  PS_GEOMETRIC = $10000;
  {$EXTERNALSYM PS_TYPE_MASK}
  PS_TYPE_MASK = $F0000;
  WHITE_BRUSH = 0;
  {$EXTERNALSYM LTGRAY_BRUSH}
  LTGRAY_BRUSH = 1;
  {$EXTERNALSYM GRAY_BRUSH}
  GRAY_BRUSH = 2;
  {$EXTERNALSYM DKGRAY_BRUSH}
  DKGRAY_BRUSH = 3;
  {$EXTERNALSYM BLACK_BRUSH}
  BLACK_BRUSH = 4;
  {$EXTERNALSYM NULL_BRUSH}
  NULL_BRUSH = 5;
  {$EXTERNALSYM HOLLOW_BRUSH}
  HOLLOW_BRUSH = NULL_BRUSH;
  {$EXTERNALSYM WHITE_PEN}
  WHITE_PEN = 6;
  {$EXTERNALSYM BLACK_PEN}
  BLACK_PEN = 7;
  {$EXTERNALSYM NULL_PEN}
  NULL_PEN = 8;
  {$EXTERNALSYM OEM_FIXED_FONT}
  OEM_FIXED_FONT = 10;
  {$EXTERNALSYM ANSI_FIXED_FONT}
  ANSI_FIXED_FONT = 11;
  {$EXTERNALSYM ANSI_VAR_FONT}
  ANSI_VAR_FONT = 12;
  {$EXTERNALSYM SYSTEM_FONT}
  SYSTEM_FONT = 13;
  {$EXTERNALSYM DEVICE_DEFAULT_FONT}
  DEVICE_DEFAULT_FONT = 14;
  {$EXTERNALSYM DEFAULT_PALETTE}
  DEFAULT_PALETTE = 15;
  {$EXTERNALSYM SYSTEM_FIXED_FONT}
  SYSTEM_FIXED_FONT = $10;
  {$EXTERNALSYM DEFAULT_GUI_FONT}
  DEFAULT_GUI_FONT = 17;
  {$EXTERNALSYM DC_BRUSH}
  DC_BRUSH = 18;
  {$EXTERNALSYM DC_PEN}
  DC_PEN = 19;
	{ Ternary raster operations }
  R2_BLACK       = 1;     {  0   }
  {$EXTERNALSYM R2_NOTMERGEPEN}
  R2_NOTMERGEPEN = 2;     { DPon }
  {$EXTERNALSYM R2_MASKNOTPEN}
  R2_MASKNOTPEN  = 3;     { DPna }
  {$EXTERNALSYM R2_NOTCOPYPEN}
  R2_NOTCOPYPEN  = 4;     { PN   }
  {$EXTERNALSYM R2_MASKPENNOT}
  R2_MASKPENNOT  = 5;     { PDna }
  {$EXTERNALSYM R2_NOT}
  R2_NOT         = 6;     { Dn   }
  {$EXTERNALSYM R2_XORPEN}
  R2_XORPEN      = 7;     { DPx  }
  {$EXTERNALSYM R2_NOTMASKPEN}
  R2_NOTMASKPEN  = 8;     { DPan }
  {$EXTERNALSYM R2_MASKPEN}
  R2_MASKPEN     = 9;     { DPa  }
  {$EXTERNALSYM R2_NOTXORPEN}
  R2_NOTXORPEN   = 10;    { DPxn }
  {$EXTERNALSYM R2_NOP}
  R2_NOP         = 11;    { D    }
  {$EXTERNALSYM R2_MERGENOTPEN}
  R2_MERGENOTPEN = 12;    { DPno }
  {$EXTERNALSYM R2_COPYPEN}
  R2_COPYPEN     = 13;    { P    }
  {$EXTERNALSYM R2_MERGEPENNOT}
  R2_MERGEPENNOT = 14;    { PDno }
  {$EXTERNALSYM R2_MERGEPEN}
  R2_MERGEPEN    = 15;    { DPo  }
  {$EXTERNALSYM R2_WHITE}
  R2_WHITE       = $10;   {  1   }
  {$EXTERNALSYM R2_LAST}
  R2_LAST        = $10;
	{$EXTERNALSYM SRCCOPY}
	SRCCOPY     = $00CC0020;     { dest = source                    }
	{$EXTERNALSYM SRCPAINT}
	SRCPAINT    = $00EE0086;     { dest = source OR dest            }
	{$EXTERNALSYM SRCAND}
	SRCAND      = $008800C6;     { dest = source AND dest           }
	{$EXTERNALSYM SRCINVERT}
	SRCINVERT   = $00660046;     { dest = source XOR dest           }
	{$EXTERNALSYM SRCERASE}
	SRCERASE    = $00440328;     { dest = source AND (NOT dest )    }
	{$EXTERNALSYM NOTSRCCOPY}
	NOTSRCCOPY  = $00330008;     { dest = (NOT source)              }
	{$EXTERNALSYM NOTSRCERASE}
	NOTSRCERASE = $001100A6;     { dest = (NOT src) AND (NOT dest)  }
	{$EXTERNALSYM MERGECOPY}
	MERGECOPY   = $00C000CA;     { dest = (source AND pattern)      }
	{$EXTERNALSYM MERGEPAINT}
	MERGEPAINT  = $00BB0226;     { dest = (NOT source) OR dest      }
	{$EXTERNALSYM PATCOPY}
	PATCOPY     = $00F00021;     { dest = pattern                   }
	{$EXTERNALSYM PATPAINT}
	PATPAINT    = $00FB0A09;     { dest = DPSnoo                    }
	{$EXTERNALSYM PATINVERT}
	PATINVERT   = $005A0049;     { dest = pattern XOR dest          }
	{$EXTERNALSYM DSTINVERT}
	DSTINVERT   = $00550009;     { dest = (NOT dest)                }
	{$EXTERNALSYM BLACKNESS}
	BLACKNESS   = $00000042;     { dest = BLACK                     }
	{$EXTERNALSYM WHITENESS}
	WHITENESS   = $00FF0062;     { dest = WHITE                     }

  {$EXTERNALSYM BLACKONWHITE}
  BLACKONWHITE = 1;
  {$EXTERNALSYM WHITEONBLACK}
  WHITEONBLACK = 2;
  {$EXTERNALSYM COLORONCOLOR}
  COLORONCOLOR = 3;
  {$EXTERNALSYM HALFTONE}
  HALFTONE = 4;
  {$EXTERNALSYM MAXSTRETCHBLTMODE}
  MAXSTRETCHBLTMODE = 4;

	TRANSPARENT = 1;
	OPAQUE      = 0;

  CTLCOLOR_MSGBOX = 0;
  {$EXTERNALSYM CTLCOLOR_EDIT}
  CTLCOLOR_EDIT = 1;
  {$EXTERNALSYM CTLCOLOR_LISTBOX}
  CTLCOLOR_LISTBOX = 2;
  {$EXTERNALSYM CTLCOLOR_BTN}
  CTLCOLOR_BTN = 3;
  {$EXTERNALSYM CTLCOLOR_DLG}
  CTLCOLOR_DLG = 4;
  {$EXTERNALSYM CTLCOLOR_SCROLLBAR}
  CTLCOLOR_SCROLLBAR = 5;
  {$EXTERNALSYM CTLCOLOR_STATIC}
  CTLCOLOR_STATIC = 6;
  {$EXTERNALSYM CTLCOLOR_MAX}
  CTLCOLOR_MAX = 7;

  {$EXTERNALSYM COLOR_SCROLLBAR}
  COLOR_SCROLLBAR = 0;
  {$EXTERNALSYM COLOR_BACKGROUND}
  COLOR_BACKGROUND = 1;
  {$EXTERNALSYM COLOR_ACTIVECAPTION}
  COLOR_ACTIVECAPTION = 2;
  {$EXTERNALSYM COLOR_INACTIVECAPTION}
  COLOR_INACTIVECAPTION = 3;
  {$EXTERNALSYM COLOR_MENU}
  COLOR_MENU = 4;
  {$EXTERNALSYM COLOR_WINDOW}
  COLOR_WINDOW = 5;
  {$EXTERNALSYM COLOR_WINDOWFRAME}
  COLOR_WINDOWFRAME = 6;
  {$EXTERNALSYM COLOR_MENUTEXT}
  COLOR_MENUTEXT = 7;
  {$EXTERNALSYM COLOR_WINDOWTEXT}
  COLOR_WINDOWTEXT = 8;
  {$EXTERNALSYM COLOR_CAPTIONTEXT}
  COLOR_CAPTIONTEXT = 9;
  {$EXTERNALSYM COLOR_ACTIVEBORDER}
  COLOR_ACTIVEBORDER = 10;
  {$EXTERNALSYM COLOR_INACTIVEBORDER}
  COLOR_INACTIVEBORDER = 11;
  {$EXTERNALSYM COLOR_APPWORKSPACE}
  COLOR_APPWORKSPACE = 12;
  {$EXTERNALSYM COLOR_HIGHLIGHT}
  COLOR_HIGHLIGHT = 13;
  {$EXTERNALSYM COLOR_HIGHLIGHTTEXT}
  COLOR_HIGHLIGHTTEXT = 14;
  {$EXTERNALSYM COLOR_BTNFACE}
  COLOR_BTNFACE = 15;
  {$EXTERNALSYM COLOR_BTNSHADOW}
  COLOR_BTNSHADOW = $10;
  {$EXTERNALSYM COLOR_GRAYTEXT}
  COLOR_GRAYTEXT = 17;
  {$EXTERNALSYM COLOR_BTNTEXT}
  COLOR_BTNTEXT = 18;
  {$EXTERNALSYM COLOR_INACTIVECAPTIONTEXT}
  COLOR_INACTIVECAPTIONTEXT = 19;
  {$EXTERNALSYM COLOR_BTNHIGHLIGHT}
  COLOR_BTNHIGHLIGHT = 20;

  {$EXTERNALSYM COLOR_3DDKSHADOW}
  COLOR_3DDKSHADOW = 21;
  {$EXTERNALSYM COLOR_3DLIGHT}
  COLOR_3DLIGHT = 22;
  {$EXTERNALSYM COLOR_INFOTEXT}
  COLOR_INFOTEXT = 23;
  {$EXTERNALSYM COLOR_INFOBK}
  COLOR_INFOBK = 24;

  {$EXTERNALSYM COLOR_HOTLIGHT}
  COLOR_HOTLIGHT = 26;
  {$EXTERNALSYM COLOR_GRADIENTACTIVECAPTION}
  COLOR_GRADIENTACTIVECAPTION = 27;
  {$EXTERNALSYM COLOR_GRADIENTINACTIVECAPTION}
  COLOR_GRADIENTINACTIVECAPTION = 28;

  {$EXTERNALSYM COLOR_MENUHILIGHT}
  COLOR_MENUHILIGHT = 29;
  {$EXTERNALSYM COLOR_MENUBAR}
  COLOR_MENUBAR = 30;

  COLOR_ENDCOLORS = COLOR_MENUBAR;

  {$EXTERNALSYM COLOR_DESKTOP}
  COLOR_DESKTOP = COLOR_BACKGROUND;
  {$EXTERNALSYM COLOR_3DFACE}
  COLOR_3DFACE = COLOR_BTNFACE;
  {$EXTERNALSYM COLOR_3DSHADOW}
  COLOR_3DSHADOW = COLOR_BTNSHADOW;
  {$EXTERNALSYM COLOR_3DHIGHLIGHT}
  COLOR_3DHIGHLIGHT = COLOR_BTNHIGHLIGHT;
  {$EXTERNALSYM COLOR_3DHILIGHT}
  COLOR_3DHILIGHT = COLOR_BTNHIGHLIGHT;
  {$EXTERNALSYM COLOR_BTNHILIGHT}
  COLOR_BTNHILIGHT = COLOR_BTNHIGHLIGHT;
  clSystemColor = $FF000000;

  clScrollBar = TColor(clSystemColor or COLOR_SCROLLBAR);
  clBackground = TColor(clSystemColor or COLOR_BACKGROUND);
  clActiveCaption = TColor(clSystemColor or COLOR_ACTIVECAPTION);
  clInactiveCaption = TColor(clSystemColor or COLOR_INACTIVECAPTION);
  clMenu = TColor(clSystemColor or COLOR_MENU);
  clWindow = TColor(clSystemColor or COLOR_WINDOW);
  clWindowFrame = TColor(clSystemColor or COLOR_WINDOWFRAME);
  clMenuText = TColor(clSystemColor or COLOR_MENUTEXT);
  clWindowText = TColor(clSystemColor or COLOR_WINDOWTEXT);
  clCaptionText = TColor(clSystemColor or COLOR_CAPTIONTEXT);
  clActiveBorder = TColor(clSystemColor or COLOR_ACTIVEBORDER);
  clInactiveBorder = TColor(clSystemColor or COLOR_INACTIVEBORDER);
  clAppWorkSpace = TColor(clSystemColor or COLOR_APPWORKSPACE);
  clHighlight = TColor(clSystemColor or COLOR_HIGHLIGHT);
  clHighlightText = TColor(clSystemColor or COLOR_HIGHLIGHTTEXT);
	clBtnFace = TColor(clSystemColor or COLOR_BTNFACE);
  clBtnShadow = TColor(clSystemColor or COLOR_BTNSHADOW);
  clGrayText = TColor(clSystemColor or COLOR_GRAYTEXT);
  clBtnText = TColor(clSystemColor or COLOR_BTNTEXT);
  clInactiveCaptionText = TColor(clSystemColor or COLOR_INACTIVECAPTIONTEXT);
  clBtnHighlight = TColor(clSystemColor or COLOR_BTNHIGHLIGHT);
  cl3DDkShadow = TColor(clSystemColor or COLOR_3DDKSHADOW);
  cl3DLight = TColor(clSystemColor or COLOR_3DLIGHT);
  clInfoText = TColor(clSystemColor or COLOR_INFOTEXT);
  clInfoBk = TColor(clSystemColor or COLOR_INFOBK);
  clHotLight = TColor(clSystemColor or COLOR_HOTLIGHT);
  clGradientActiveCaption = TColor(clSystemColor or COLOR_GRADIENTACTIVECAPTION);
  clGradientInactiveCaption = TColor(clSystemColor or COLOR_GRADIENTINACTIVECAPTION);
  clMenuHighlight = TColor(clSystemColor or COLOR_MENUHILIGHT);
  clMenuBar = TColor(clSystemColor or COLOR_MENUBAR);

  clBlack = TColor($000000);
  clMaroon = TColor($000080);
  clGreen = TColor($008000);
  clOlive = TColor($008080);
  clNavy = TColor($800000);
  clPurple = TColor($800080);
  clTeal = TColor($808000);
  clGray = TColor($808080);
  clSilver = TColor($C0C0C0);
  clRed = TColor($0000FF);
  clLime = TColor($00FF00);
  clYellow = TColor($00FFFF);
  clBlue = TColor($FF0000);
  clFuchsia = TColor($FF00FF);
  clAqua = TColor($FFFF00);
  clLtGray = TColor($C0C0C0);
  clDkGray = TColor($808080);
  clWhite = TColor($FFFFFF);
  StandardColorsCount = 16;

  clMoneyGreen = TColor($C0DCC0);
  clSkyBlue = TColor($F0CAA6);
  clCream = TColor($F0FBFF);
  clMedGray = TColor($A4A0A0);
  ExtendedColorsCount = 4;

  clNone = TColor($1FFFFFFF);
  clDefault = TColor($20000000);

  { The following "cl" values come from the Web Named Color palette and
    are stored in the Windows COLORREF byte order x00bbggrr }
  clWebSnow = $FAFAFF;
  clWebFloralWhite = $F0FAFF;
  clWebLavenderBlush = $F5F0FF;
  clWebOldLace = $E6F5FD;
  clWebIvory = $F0FFFF;
  clWebCornSilk = $DCF8FF;
  clWebBeige = $DCF5F5;
  clWebAntiqueWhite = $D7EBFA;
  clWebWheat = $B3DEF5;
  clWebAliceBlue = $FFF8F0;
  clWebGhostWhite = $FFF8F8;
  clWebLavender = $FAE6E6;
  clWebSeashell = $EEF5FF;
  clWebLightYellow = $E0FFFF;
  clWebPapayaWhip = $D5EFFF;
  clWebNavajoWhite = $ADDEFF;
  clWebMoccasin = $B5E4FF;
  clWebBurlywood = $87B8DE;
  clWebAzure = $FFFFF0;
  clWebMintcream = $FAFFF5;
  clWebHoneydew = $F0FFF0;
  clWebLinen = $E6F0FA;
  clWebLemonChiffon = $CDFAFF;
  clWebBlanchedAlmond = $CDEBFF;
  clWebBisque = $C4E4FF;
  clWebPeachPuff = $B9DAFF;
  clWebTan = $8CB4D2;
  // yellows/reds yellow -> rosybrown
  clWebYellow = $00FFFF;
  clWebDarkOrange = $008CFF;
  clWebRed = $0000FF;
  clWebDarkRed = $00008B;
  clWebMaroon = $000080;
  clWebIndianRed = $5C5CCD;
  clWebSalmon = $7280FA;
  clWebCoral = $507FFF;
  clWebGold = $00D7FF;
  clWebTomato = $4763FF;
  clWebCrimson = $3C14DC;
  clWebBrown = $2A2AA5;
  clWebChocolate = $1E69D2;
  clWebSandyBrown = $60A4F4;
  clWebLightSalmon = $7AA0FF;
  clWebLightCoral = $8080F0;
  clWebOrange = $00A5FF;
  clWebOrangeRed = $0045FF;
  clWebFirebrick = $2222B2;
  clWebSaddleBrown = $13458B;
  clWebSienna = $2D52A0;
  clWebPeru = $3F85CD;
  clWebDarkSalmon = $7A96E9;
  clWebRosyBrown = $8F8FBC;
  // greens palegoldenrod -> darkseagreen
  clWebPaleGoldenrod = $AAE8EE;
  clWebLightGoldenrodYellow = $D2FAFA;
  clWebOlive = $008080;
  clWebForestGreen = $228B22;
  clWebGreenYellow = $2FFFAD;
  clWebChartreuse = $00FF7F;
  clWebLightGreen = $90EE90;
  clWebAquamarine = $D4FF7F;
  clWebSeaGreen = $578B2E;
  clWebGoldenRod = $20A5DA;
  clWebKhaki = $8CE6F0;
  clWebOliveDrab = $238E6B;
  clWebGreen = $008000;
  clWebYellowGreen = $32CD9A;
  clWebLawnGreen = $00FC7C;
  clWebPaleGreen = $98FB98;
  clWebMediumAquamarine = $AACD66;
  clWebMediumSeaGreen = $71B33C;
  clWebDarkGoldenRod = $0B86B8;
  clWebDarkKhaki = $6BB7BD;
  clWebDarkOliveGreen = $2F6B55;
  clWebDarkgreen = $006400;
  clWebLimeGreen = $32CD32;
  clWebLime = $00FF00;
  clWebSpringGreen = $7FFF00;
  clWebMediumSpringGreen = $9AFA00;
  clWebDarkSeaGreen = $8FBC8F;
  // greens/blues lightseagreen -> navy
  clWebLightSeaGreen = $AAB220;
  clWebPaleTurquoise = $EEEEAF;
  clWebLightCyan = $FFFFE0;
  clWebLightBlue = $E6D8AD;
  clWebLightSkyBlue = $FACE87;
  clWebCornFlowerBlue = $ED9564;
  clWebDarkBlue = $8B0000;
  clWebIndigo = $82004B;
  clWebMediumTurquoise = $CCD148;
  clWebTurquoise = $D0E040;
  clWebCyan = $FFFF00; //   clWebAqua
  clWebAqua = $FFFF00;
  clWebPowderBlue = $E6E0B0;
  clWebSkyBlue = $EBCE87;
  clWebRoyalBlue = $E16941;
  clWebMediumBlue = $CD0000;
  clWebMidnightBlue = $701919;
  clWebDarkTurquoise = $D1CE00;
  clWebCadetBlue = $A09E5F;
  clWebDarkCyan = $8B8B00;
  clWebTeal = $808000;
  clWebDeepskyBlue = $FFBF00;
  clWebDodgerBlue = $FF901E;
  clWebBlue = $FF0000;
  clWebNavy = $800000;
  // violets/pinks darkviolet -> pink
  clWebDarkViolet = $D30094;
  clWebDarkOrchid = $CC3299;
  clWebMagenta = $FF00FF; //   clWebFuchsia
  clWebFuchsia = $FF00FF;
  clWebDarkMagenta = $8B008B;
  clWebMediumVioletRed = $8515C7;
  clWebPaleVioletRed = $9370DB;
  clWebBlueViolet = $E22B8A;
  clWebMediumOrchid = $D355BA;
  clWebMediumPurple = $DB7093;
  clWebPurple = $800080;
  clWebDeepPink = $9314FF;
  clWebLightPink = $C1B6FF;
  clWebViolet = $EE82EE;
  clWebOrchid = $D670DA;
  clWebPlum = $DDA0DD;
  clWebThistle = $D8BFD8;
  clWebHotPink = $B469FF;
  clWebPink = $CBC0FF;
  // blue/gray/black lightsteelblue -> black
  clWebLightSteelBlue = $DEC4B0;
  clWebMediumSlateBlue = $EE687B;
  clWebLightSlateGray = $998877;
  clWebWhite = $FFFFFF;
  clWebLightgrey = $D3D3D3;
  clWebGray = $808080;
  clWebSteelBlue = $B48246;
  clWebSlateBlue = $CD5A6A;
  clWebSlateGray = $908070;
  clWebWhiteSmoke = $F5F5F5;
  clWebSilver = $C0C0C0;
  clWebDimGray = $696969;
  clWebMistyRose = $E1E4FF;
  clWebDarkSlateBlue = $8B3D48;
  clWebDarkSlategray = $4F4F2F;
  clWebGainsboro = $DCDCDC;
  clWebDarkGray = $A9A9A9;
  clWebBlack = $000000;

  OUT_DEFAULT_PRECIS = 0;
  {$EXTERNALSYM OUT_STRING_PRECIS}
  OUT_STRING_PRECIS = 1;
  {$EXTERNALSYM OUT_CHARACTER_PRECIS}
  OUT_CHARACTER_PRECIS = 2;
  {$EXTERNALSYM OUT_STROKE_PRECIS}
  OUT_STROKE_PRECIS = 3;
  {$EXTERNALSYM OUT_TT_PRECIS}
  OUT_TT_PRECIS = 4;
  {$EXTERNALSYM OUT_DEVICE_PRECIS}
  OUT_DEVICE_PRECIS = 5;
  {$EXTERNALSYM OUT_RASTER_PRECIS}
  OUT_RASTER_PRECIS = 6;
  {$EXTERNALSYM OUT_TT_ONLY_PRECIS}
  OUT_TT_ONLY_PRECIS = 7;
  {$EXTERNALSYM OUT_OUTLINE_PRECIS}
  OUT_OUTLINE_PRECIS = 8;
  {$EXTERNALSYM OUT_SCREEN_OUTLINE_PRECIS}
  OUT_SCREEN_OUTLINE_PRECIS = 9;

  {$EXTERNALSYM CLIP_DEFAULT_PRECIS}
  CLIP_DEFAULT_PRECIS = 0;
  {$EXTERNALSYM CLIP_CHARACTER_PRECIS}
  CLIP_CHARACTER_PRECIS = 1;
  {$EXTERNALSYM CLIP_STROKE_PRECIS}
  CLIP_STROKE_PRECIS = 2;
  {$EXTERNALSYM CLIP_MASK}
  CLIP_MASK = 15;
  {$EXTERNALSYM CLIP_LH_ANGLES}
  CLIP_LH_ANGLES = (1 shl 4);
  {$EXTERNALSYM CLIP_TT_ALWAYS}
  CLIP_TT_ALWAYS = (2 shl 4);
  {$EXTERNALSYM CLIP_EMBEDDED}
  CLIP_EMBEDDED  = (8 shl 4);

  {$EXTERNALSYM DEFAULT_QUALITY}
  DEFAULT_QUALITY = 0;
  {$EXTERNALSYM DRAFT_QUALITY}
  DRAFT_QUALITY = 1;
  {$EXTERNALSYM PROOF_QUALITY}
  PROOF_QUALITY = 2;
  {$EXTERNALSYM NONANTIALIASED_QUALITY}
  NONANTIALIASED_QUALITY = 3;
  {$EXTERNALSYM ANTIALIASED_QUALITY}
  ANTIALIASED_QUALITY = 4;

  {$EXTERNALSYM DEFAULT_PITCH}
  DEFAULT_PITCH = 0;
  {$EXTERNALSYM FIXED_PITCH}
  FIXED_PITCH = 1;
  {$EXTERNALSYM VARIABLE_PITCH}
  VARIABLE_PITCH = 2;
  {$EXTERNALSYM MONO_FONT}
  MONO_FONT = 8;

  {$EXTERNALSYM ANSI_CHARSET}
  ANSI_CHARSET = 0;
  {$EXTERNALSYM DEFAULT_CHARSET}
  DEFAULT_CHARSET = 1;
  {$EXTERNALSYM SYMBOL_CHARSET}
  SYMBOL_CHARSET = 2;
  {$EXTERNALSYM SHIFTJIS_CHARSET}
  SHIFTJIS_CHARSET = $80;
  {$EXTERNALSYM HANGEUL_CHARSET}
  HANGEUL_CHARSET = 129;
  {$EXTERNALSYM GB2312_CHARSET}
  GB2312_CHARSET = 134;
  {$EXTERNALSYM CHINESEBIG5_CHARSET}
  CHINESEBIG5_CHARSET = 136;
  {$EXTERNALSYM OEM_CHARSET}
  OEM_CHARSET = 255;
  {$EXTERNALSYM JOHAB_CHARSET}
  JOHAB_CHARSET = 130;
  {$EXTERNALSYM HEBREW_CHARSET}
  HEBREW_CHARSET = 177;
  {$EXTERNALSYM ARABIC_CHARSET}
  ARABIC_CHARSET = 178;
  {$EXTERNALSYM GREEK_CHARSET}
  GREEK_CHARSET = 161;
  {$EXTERNALSYM TURKISH_CHARSET}
  TURKISH_CHARSET = 162;
  {$EXTERNALSYM VIETNAMESE_CHARSET}
  VIETNAMESE_CHARSET = 163;
  {$EXTERNALSYM THAI_CHARSET}
  THAI_CHARSET = 222;
  {$EXTERNALSYM EASTEUROPE_CHARSET}
  EASTEUROPE_CHARSET = 238;
  {$EXTERNALSYM RUSSIAN_CHARSET}
  RUSSIAN_CHARSET = 204;

  {$EXTERNALSYM MAC_CHARSET}
  MAC_CHARSET = 77;
  {$EXTERNALSYM BALTIC_CHARSET}
  BALTIC_CHARSET = 186;

  {$EXTERNALSYM FS_LATIN1}
  FS_LATIN1 = 1;
  {$EXTERNALSYM FS_LATIN2}
  FS_LATIN2 = 2;
  {$EXTERNALSYM FS_CYRILLIC}
  FS_CYRILLIC = 4;
  {$EXTERNALSYM FS_GREEK}
  FS_GREEK = 8;
  {$EXTERNALSYM FS_TURKISH}
  FS_TURKISH = $10;
  {$EXTERNALSYM FS_HEBREW}
  FS_HEBREW = $20;
  {$EXTERNALSYM FS_ARABIC}
  FS_ARABIC = $40;
  {$EXTERNALSYM FS_BALTIC}
  FS_BALTIC = $80;
  {$EXTERNALSYM FS_VIETNAMESE}
  FS_VIETNAMESE = $00000100;
  {$EXTERNALSYM FS_THAI}
  FS_THAI = $10000;
  {$EXTERNALSYM FS_JISJAPAN}
  FS_JISJAPAN = $20000;
  {$EXTERNALSYM FS_CHINESESIMP}
  FS_CHINESESIMP = $40000;
  {$EXTERNALSYM FS_WANSUNG}
  FS_WANSUNG = $80000;
  {$EXTERNALSYM FS_CHINESETRAD}
  FS_CHINESETRAD = $100000;
  {$EXTERNALSYM FS_JOHAB}
  FS_JOHAB = $200000;
  {$EXTERNALSYM FS_SYMBOL}
  FS_SYMBOL = DWORD($80000000);

  { Font Families }
  {$EXTERNALSYM FF_DONTCARE}
  FF_DONTCARE   = (0 shl 4);     { Don't care or don't know. }
  {$EXTERNALSYM FF_ROMAN}
  FF_ROMAN      = (1 shl 4);     { Variable stroke width, serifed. }
                                 { Times Roman, Century Schoolbook, etc. }
  {$EXTERNALSYM FF_SWISS}
  FF_SWISS      = (2 shl 4);     { Variable stroke width, sans-serifed. }
                                 { Helvetica, Swiss, etc. }
  {$EXTERNALSYM FF_MODERN}
  FF_MODERN     = (3 shl 4);     { Constant stroke width, serifed or sans-serifed. }
                                 { Pica, Elite, Courier, etc. }
  {$EXTERNALSYM FF_SCRIPT}
  FF_SCRIPT     = (4 shl 4);     { Cursive, etc. }
  {$EXTERNALSYM FF_DECORATIVE}
  FF_DECORATIVE = (5 shl 4);     { Old English, etc. }

  { Font Weights }
  {$EXTERNALSYM FW_DONTCARE}
  FW_DONTCARE = 0;
  {$EXTERNALSYM FW_THIN}
  FW_THIN = 100;
  {$EXTERNALSYM FW_EXTRALIGHT}
  FW_EXTRALIGHT = 200;
  {$EXTERNALSYM FW_LIGHT}
  FW_LIGHT = 300;
  {$EXTERNALSYM FW_NORMAL}
  FW_NORMAL = 400;
  {$EXTERNALSYM FW_MEDIUM}
  FW_MEDIUM = 500;
  {$EXTERNALSYM FW_SEMIBOLD}
  FW_SEMIBOLD = 600;
  {$EXTERNALSYM FW_BOLD}
  FW_BOLD = 700;
  {$EXTERNALSYM FW_EXTRABOLD}
  FW_EXTRABOLD = 800;
  {$EXTERNALSYM FW_HEAVY}
  FW_HEAVY = 900;
  {$EXTERNALSYM FW_ULTRALIGHT}
  FW_ULTRALIGHT = FW_EXTRALIGHT;
  {$EXTERNALSYM FW_REGULAR}
  FW_REGULAR = FW_NORMAL;
  {$EXTERNALSYM FW_DEMIBOLD}
  FW_DEMIBOLD = FW_SEMIBOLD;
  {$EXTERNALSYM FW_ULTRABOLD}
  FW_ULTRABOLD = FW_EXTRABOLD;
  {$EXTERNALSYM FW_BLACK}
  FW_BLACK = FW_HEAVY;

	WA_INACTIVE         = 0;
	WA_ACTIVE           = 1;
	WA_CLICKACTIVE      = 2;

	CREATE_NEW          = 1;
	CREATE_ALWAYS       = 2;
	OPEN_EXISTING       = 3;
	OPEN_ALWAYS         = 4;
	TRUNCATE_EXISTING   = 5;

	IGNORE = 0;               { Ignore signal }
	INFINITE = DWORD($FFFFFFFF);     { Infinite timeout }

	MAXIMUM_WAIT_OBJECTS = 64;

	STATUS_WAIT_0                   = $00000000;
	STATUS_ABANDONED_WAIT_0         = $00000080;
	STATUS_USER_APC                 = $000000C0;
	STATUS_TIMEOUT                  = $00000102;
	STATUS_PENDING                  = $00000103;
	WAIT_FAILED  = DWORD($FFFFFFFF);
	WAIT_OBJECT_0 = ((STATUS_WAIT_0 ) + 0 );

	WAIT_ABANDONED = ((STATUS_ABANDONED_WAIT_0 ) + 0 );
	WAIT_ABANDONED_0 = ((STATUS_ABANDONED_WAIT_0 ) + 0 );
	WAIT_TIMEOUT = STATUS_TIMEOUT;
	WAIT_IO_COMPLETION = STATUS_USER_APC;
	STILL_ACTIVE = STATUS_PENDING;

  THREAD_BASE_PRIORITY_LOWRT = 15;  { value that gets a thread to LowRealtime-1 }
  {$EXTERNALSYM THREAD_BASE_PRIORITY_LOWRT}
  THREAD_BASE_PRIORITY_MAX = 2;     { maximum thread base priority boost }
  {$EXTERNALSYM THREAD_BASE_PRIORITY_MAX}
  THREAD_BASE_PRIORITY_MIN = -2;    { minimum thread base priority boost }
  {$EXTERNALSYM THREAD_BASE_PRIORITY_MIN}
  THREAD_BASE_PRIORITY_IDLE = -15;  { value that gets a thread to idle }
  {$EXTERNALSYM THREAD_BASE_PRIORITY_IDLE}

  SYNCHRONIZE = $00100000;
  {$EXTERNALSYM SYNCHRONIZE}
  STANDARD_RIGHTS_REQUIRED = $000F0000;
  {$EXTERNALSYM STANDARD_RIGHTS_REQUIRED}
  EVENT_MODIFY_STATE = $0002;
  {$EXTERNALSYM EVENT_MODIFY_STATE}
  EVENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or $3);
  {$EXTERNALSYM EVENT_ALL_ACCESS}
  MUTANT_QUERY_STATE = $0001;
  {$EXTERNALSYM MUTANT_QUERY_STATE}
  MUTANT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or MUTANT_QUERY_STATE);

	DEBUG_PROCESS                   = $00000001;
  {$EXTERNALSYM DEBUG_PROCESS}
  DEBUG_ONLY_THIS_PROCESS         = $00000002;
  {$EXTERNALSYM DEBUG_ONLY_THIS_PROCESS}

  CREATE_SUSPENDED                = $00000004;
  {$EXTERNALSYM CREATE_SUSPENDED}

  DETACHED_PROCESS                = $00000008;
  {$EXTERNALSYM DETACHED_PROCESS}

  CREATE_NEW_CONSOLE              = $00000010;
  {$EXTERNALSYM CREATE_NEW_CONSOLE}

  NORMAL_PRIORITY_CLASS           = $00000020;
  {$EXTERNALSYM NORMAL_PRIORITY_CLASS}
  IDLE_PRIORITY_CLASS             = $00000040;
  {$EXTERNALSYM IDLE_PRIORITY_CLASS}
  HIGH_PRIORITY_CLASS             = $00000080;
  {$EXTERNALSYM HIGH_PRIORITY_CLASS}
  REALTIME_PRIORITY_CLASS         = $00000100;
  {$EXTERNALSYM REALTIME_PRIORITY_CLASS}

  CREATE_NEW_PROCESS_GROUP        = $00000200;
  {$EXTERNALSYM CREATE_NEW_PROCESS_GROUP}
  CREATE_UNICODE_ENVIRONMENT      = $00000400;
  {$EXTERNALSYM CREATE_UNICODE_ENVIRONMENT}

  CREATE_SEPARATE_WOW_VDM         = $00000800;
  {$EXTERNALSYM CREATE_SEPARATE_WOW_VDM}
  CREATE_SHARED_WOW_VDM           = $00001000;
  {$EXTERNALSYM CREATE_SHARED_WOW_VDM}
  CREATE_FORCEDOS                 = $00002000;
  {$EXTERNALSYM CREATE_FORCEDOS}

  CREATE_DEFAULT_ERROR_MODE       = $04000000;
  {$EXTERNALSYM CREATE_DEFAULT_ERROR_MODE}
  CREATE_NO_WINDOW                = $08000000;
  {$EXTERNALSYM CREATE_NO_WINDOW}

  PROFILE_USER                    = $10000000;
  {$EXTERNALSYM PROFILE_USER}
  PROFILE_KERNEL                  = $20000000;
  {$EXTERNALSYM PROFILE_KERNEL}
  PROFILE_SERVER                  = $40000000;
  {$EXTERNALSYM PROFILE_SERVER}

  PAGE_NOACCESS = 1;
  {$EXTERNALSYM PAGE_NOACCESS}
  PAGE_READONLY = 2;
  {$EXTERNALSYM PAGE_READONLY}
  PAGE_READWRITE = 4;
  {$EXTERNALSYM PAGE_READWRITE}
  PAGE_WRITECOPY = 8;
  {$EXTERNALSYM PAGE_WRITECOPY}
  PAGE_EXECUTE = $10;
  {$EXTERNALSYM PAGE_EXECUTE}
  PAGE_EXECUTE_READ = $20;
  {$EXTERNALSYM PAGE_EXECUTE_READ}
  PAGE_EXECUTE_READWRITE = $40;
  {$EXTERNALSYM PAGE_EXECUTE_READWRITE}
  PAGE_EXECUTE_WRITECOPY = $80;
  {$EXTERNALSYM PAGE_EXECUTE_WRITECOPY}
  PAGE_GUARD = $100;
  {$EXTERNALSYM PAGE_GUARD}
  PAGE_NOCACHE = $200;
  {$EXTERNALSYM PAGE_NOCACHE}
  MEM_COMMIT = $1000;
  {$EXTERNALSYM MEM_COMMIT}
  MEM_RESERVE = $2000;
  {$EXTERNALSYM MEM_RESERVE}
  MEM_DECOMMIT = $4000;
  {$EXTERNALSYM MEM_DECOMMIT}
  MEM_RELEASE = $8000;
  {$EXTERNALSYM MEM_RELEASE}
  MEM_FREE = $10000;
  {$EXTERNALSYM MEM_FREE}
  MEM_PRIVATE = $20000;
  {$EXTERNALSYM MEM_PRIVATE}
  MEM_MAPPED = $40000;
  {$EXTERNALSYM MEM_MAPPED}
  MEM_RESET = $80000;
  {$EXTERNALSYM MEM_RESET}
  MEM_TOP_DOWN = $100000;
  {$EXTERNALSYM MEM_TOP_DOWN}
  SEC_FILE = $800000;
  {$EXTERNALSYM SEC_FILE}
  SEC_IMAGE = $1000000;
  {$EXTERNALSYM SEC_IMAGE}
  SEC_RESERVE = $4000000;
  {$EXTERNALSYM SEC_RESERVE}
  SEC_COMMIT = $8000000;
  {$EXTERNALSYM SEC_COMMIT}
  SEC_NOCACHE = $10000000;
  {$EXTERNALSYM SEC_NOCACHE}
  MEM_IMAGE = SEC_IMAGE;
  {$EXTERNALSYM MEM_IMAGE}

	THREAD_PRIORITY_LOWEST              = THREAD_BASE_PRIORITY_MIN;
  {$EXTERNALSYM THREAD_PRIORITY_LOWEST}
  THREAD_PRIORITY_BELOW_NORMAL        = THREAD_PRIORITY_LOWEST + 1;
  {$EXTERNALSYM THREAD_PRIORITY_BELOW_NORMAL}
  THREAD_PRIORITY_NORMAL              = 0;
  {$EXTERNALSYM THREAD_PRIORITY_NORMAL}
  THREAD_PRIORITY_HIGHEST             = THREAD_BASE_PRIORITY_MAX;
  {$EXTERNALSYM THREAD_PRIORITY_HIGHEST}
	THREAD_PRIORITY_ABOVE_NORMAL        = THREAD_PRIORITY_HIGHEST - 1;
	{$EXTERNALSYM THREAD_PRIORITY_ABOVE_NORMAL}
	THREAD_PRIORITY_ERROR_RETURN        = MAXLONG;
	{$EXTERNALSYM THREAD_PRIORITY_ERROR_RETURN}

	THREAD_PRIORITY_TIME_CRITICAL       = THREAD_BASE_PRIORITY_LOWRT;
	{$EXTERNALSYM THREAD_PRIORITY_TIME_CRITICAL}
	THREAD_PRIORITY_IDLE                = THREAD_BASE_PRIORITY_IDLE;
	{$EXTERNALSYM THREAD_PRIORITY_IDLE}

	STD_INPUT_HANDLE = DWORD(-10);
	{$EXTERNALSYM STD_INPUT_HANDLE}
	STD_OUTPUT_HANDLE = DWORD(-11);
	{$EXTERNALSYM STD_OUTPUT_HANDLE}
  STD_ERROR_HANDLE = DWORD(-12);

  { Queue status flags for GetQueueStatus() and MsgWaitForMultipleObjects() }
	{$EXTERNALSYM QS_KEY}
  QS_KEY                  = $0001;
	{$EXTERNALSYM QS_MOUSEMOVE}
	QS_MOUSEMOVE            = $0002;
  {$EXTERNALSYM QS_MOUSEBUTTON}
	QS_MOUSEBUTTON          = $0004;
	{$EXTERNALSYM QS_POSTMESSAGE}
	QS_POSTMESSAGE          = $0008;
  {$EXTERNALSYM QS_TIMER}
  QS_TIMER                = $0010;
  {$EXTERNALSYM QS_PAINT}
  QS_PAINT                = $0020;
  {$EXTERNALSYM QS_SENDMESSAGE}
  QS_SENDMESSAGE          = $0040;
  {$EXTERNALSYM QS_HOTKEY}
  QS_HOTKEY               = $0080;
  {$EXTERNALSYM QS_ALLPOSTMESSAGE}
  QS_ALLPOSTMESSAGE       = $0100;

  {$EXTERNALSYM QS_MOUSE}
  QS_MOUSE = (QS_MOUSEMOVE or QS_MOUSEBUTTON);
  {$EXTERNALSYM QS_INPUT}
  QS_INPUT = (QS_MOUSE or QS_KEY);
  {$EXTERNALSYM QS_ALLEVENTS}
  QS_ALLEVENTS = (QS_INPUT or QS_POSTMESSAGE or QS_TIMER or QS_PAINT
    or QS_HOTKEY);
  {$EXTERNALSYM QS_ALLINPUT}
  QS_ALLINPUT = (QS_INPUT or QS_POSTMESSAGE or QS_TIMER or QS_PAINT
    or QS_HOTKEY or QS_SENDMESSAGE);

	GENERIC_READ        = LongWord($80000000);
	GENERIC_WRITE       = $40000000;
	GENERIC_EXECUTE     = $20000000;

	FILE_ATTRIBUTE_NORMAL= $00000080;
	INVALID_HANDLE_VALUE= DWORD(-1);

	GWL_WNDPROC    = -4;
	{$EXTERNALSYM GWL_HINSTANCE}
	GWL_HINSTANCE  = -6;
	{$EXTERNALSYM GWL_HWNDPARENT}
	GWL_HWNDPARENT = -8;
	{$EXTERNALSYM GWL_STYLE}
	GWL_STYLE      = -16;
	{$EXTERNALSYM GWL_EXSTYLE}
	GWL_EXSTYLE    = -20;
	{$EXTERNALSYM GWL_USERDATA}
	GWL_USERDATA   = -21;
	{$EXTERNALSYM GWL_ID}
	GWL_ID         = -12;

	KE_UP        : Byte = $01;
	KE_DOWN      : Byte = $10;

  SW_HIDE = 0;
  {$EXTERNALSYM SW_SHOWNORMAL}
	SW_SHOWNORMAL = 1;
  {$EXTERNALSYM SW_NORMAL}
  SW_NORMAL = 1;
  {$EXTERNALSYM SW_SHOWMINIMIZED}
  SW_SHOWMINIMIZED = 2;
  {$EXTERNALSYM SW_SHOWMAXIMIZED}
  SW_SHOWMAXIMIZED = 3;
  {$EXTERNALSYM SW_MAXIMIZE}
  SW_MAXIMIZE = 3;
  {$EXTERNALSYM SW_SHOWNOACTIVATE}
  SW_SHOWNOACTIVATE = 4;
  {$EXTERNALSYM SW_SHOW}
  SW_SHOW = 5;
  {$EXTERNALSYM SW_MINIMIZE}
  SW_MINIMIZE = 6;
  {$EXTERNALSYM SW_SHOWMINNOACTIVE}
  SW_SHOWMINNOACTIVE = 7;
  {$EXTERNALSYM SW_SHOWNA}
  SW_SHOWNA = 8;
  {$EXTERNALSYM SW_RESTORE}
  SW_RESTORE = 9;
  {$EXTERNALSYM SW_SHOWDEFAULT}
  SW_SHOWDEFAULT = 10;
  {$EXTERNALSYM SW_MAX}
  SW_MAX = 10;

	SWP_NOSIZE = 1;
	{$EXTERNALSYM SWP_NOMOVE}
  SWP_NOMOVE = 2;
  {$EXTERNALSYM SWP_NOZORDER}
  SWP_NOZORDER = 4;
  {$EXTERNALSYM SWP_NOREDRAW}
  SWP_NOREDRAW = 8;
  {$EXTERNALSYM SWP_NOACTIVATE}
  SWP_NOACTIVATE = $10;
  {$EXTERNALSYM SWP_FRAMECHANGED}
  SWP_FRAMECHANGED = $20;    { The frame changed: send WM_NCCALCSIZE }
  {$EXTERNALSYM SWP_SHOWWINDOW}
  SWP_SHOWWINDOW = $40;
  {$EXTERNALSYM SWP_HIDEWINDOW}
  SWP_HIDEWINDOW = $80;
  {$EXTERNALSYM SWP_NOCOPYBITS}
  SWP_NOCOPYBITS = $100;
  {$EXTERNALSYM SWP_NOOWNERZORDER}
  SWP_NOOWNERZORDER = $200;  { Don't do owner Z ordering }
  {$EXTERNALSYM SWP_NOSENDCHANGING}
  SWP_NOSENDCHANGING = $400;  { Don't send WM_WINDOWPOSCHANGING }
  {$EXTERNALSYM SWP_DRAWFRAME}
  SWP_DRAWFRAME = SWP_FRAMECHANGED;
  {$EXTERNALSYM SWP_NOREPOSITION}
  SWP_NOREPOSITION = SWP_NOOWNERZORDER;
  {$EXTERNALSYM SWP_DEFERERASE}
  SWP_DEFERERASE = $2000;
  {$EXTERNALSYM SWP_ASYNCWINDOWPOS}
  SWP_ASYNCWINDOWPOS = $4000;

  {$EXTERNALSYM HWND_TOP}
  HWND_TOP = 0;
  {$EXTERNALSYM HWND_BOTTOM}
  HWND_BOTTOM = 1;
  {$EXTERNALSYM HWND_TOPMOST}
  HWND_TOPMOST = HWND(-1);
  {$EXTERNALSYM HWND_NOTOPMOST}
  HWND_NOTOPMOST = HWND(-2);


const
  { DrawText() Format Flags }
  {$EXTERNALSYM DT_TOP}
  DT_TOP = 0;
  {$EXTERNALSYM DT_LEFT}
  DT_LEFT = 0;
  {$EXTERNALSYM DT_CENTER}
  DT_CENTER = 1;
  {$EXTERNALSYM DT_RIGHT}
  DT_RIGHT = 2;
  {$EXTERNALSYM DT_VCENTER}
  DT_VCENTER = 4;
  {$EXTERNALSYM DT_BOTTOM}
  DT_BOTTOM = 8;
  {$EXTERNALSYM DT_WORDBREAK}
  DT_WORDBREAK = $10;
  {$EXTERNALSYM DT_SINGLELINE}
  DT_SINGLELINE = $20;
  {$EXTERNALSYM DT_EXPANDTABS}
  DT_EXPANDTABS = $40;
  {$EXTERNALSYM DT_TABSTOP}
  DT_TABSTOP = $80;
  {$EXTERNALSYM DT_NOCLIP}
  DT_NOCLIP = $100;
  {$EXTERNALSYM DT_EXTERNALLEADING}
  DT_EXTERNALLEADING = $200;
  {$EXTERNALSYM DT_CALCRECT}
  DT_CALCRECT = $400;
  {$EXTERNALSYM DT_NOPREFIX}
  DT_NOPREFIX = $800;
  {$EXTERNALSYM DT_INTERNAL}
  DT_INTERNAL = $1000;
  {$EXTERNALSYM DT_HIDEPREFIX}
  DT_HIDEPREFIX = $00100000;
  {$EXTERNALSYM DT_PREFIXONLY}
  DT_PREFIXONLY = $00200000;

  {$EXTERNALSYM DT_EDITCONTROL}
  DT_EDITCONTROL = $2000;
  {$EXTERNALSYM DT_PATH_ELLIPSIS}
  DT_PATH_ELLIPSIS = $4000;
  {$EXTERNALSYM DT_END_ELLIPSIS}
  DT_END_ELLIPSIS = $8000;
  {$EXTERNALSYM DT_MODIFYSTRING}
  DT_MODIFYSTRING = $10000;
  {$EXTERNALSYM DT_RTLREADING}
  DT_RTLREADING = $20000;
  {$EXTERNALSYM DT_WORD_ELLIPSIS}
  DT_WORD_ELLIPSIS = $40000;

type
	PPoint         =^TPoint;
	TPoint         = packed record
		X: Longint;
		Y: Longint;
	end;
	PRect          =^TRect;
	TRect          = packed record
		case Integer of
			0: (Left, Top, Right, Bottom: Longint);
			1: (TopLeft, BottomRight: TPoint);
	end;
	TMSG           = packed record
		hwnd: HWND;
		case message: UINT of
			0: (wParam  : WPARAM;lParam: LPARAM; time: DWORD; pt: TPoint;);
			1: (wParamLo, wParamHi, lParamLo, lParamHi: WORD);
	end;

	PByteArr    = ^ByteArr;
	ByteArr     = array [0..0] of Byte;
	PFloatArr   = ^FloatArr;
	FloatArr    = array [Byte] of Single;
	TRGB        = record R, G, B: Byte end;
	TRGBQuad    = record
		case Integer of
			0: (aR,aG,aB,aA: Byte);
			1: (data       : Cardinal);
	end;
	PTrippleArray=^TrippleArray;
	PQuadArray  =^QuadArray;
	QuadArray   = array [0..0] of TRGBQuad;
	TrippleArray= array [0..0] of TRGB;
	TFRGBQuad   = record
		R,G,B,A   : Single;
	end;
	TsVertex    = record
		sX,sY,sZ  : Single;
	end;

	TNAILCallBack= (np_init, np_destroy, np_process, np_render);
	TWndClass      = packed record
		style: UINT;
		lpfnWndProc: Pointer;
		cbClsExtra: Integer;
		cbWndExtra: Integer;
		hInstance: HINST;
		hIcon: HICON;
		hCursor: HCURSOR;
		hbrBackground: HBRUSH;
		lpszMenuName: PChar;
		lpszClassName: PChar;
	end;
	PKeyboardState = ^TKeyboardState;
	TKeyboardState = array [Byte] of Byte;
	TBMPINFOHEADER = packed record
		biSize: DWORD;
		biWidth: Longint;
		biHeight: Longint;
		biPlanes: Word;
		biBitCount: Word;
		biCompression: DWORD;
		biSizeImage: DWORD;
		biXPelsPerMeter: Longint;
		biYPelsPerMeter: Longint;
		biClrUsed: DWORD;
		biClrImportant: DWORD;
	end;
	TBitmapInfoHeader = TBMPINFOHEADER;
	TBitmapFileHeader= packed record
		bfType: Word;
		bfSize: DWORD;
		bfReserved1: Word;
		bfReserved2: Word;
		bfOffBits: DWORD;
	end;
	tagBITMAPCOREHEADER = packed record
		bcSize: DWORD;
		bcWidth: Word;
		bcHeight: Word;
		bcPlanes: Word;
		bcBitCount: Word;
	end;
	TBitmapCoreHeader = tagBITMAPCOREHEADER;
	TBITMAPINFO    = packed record
		bmiHeader    : TBitmapInfoHeader;
		bmiColors    : array[0..0] of record r,g,b,res:Byte end;
	end;
	TSYSTEMTIME    = record
		wYear: Word;
		wMonth: Word;
		wDayOfWeek: Word;
		wDay: Word;
		wHour: Word;
		wMinute: Word;
		wSecond: Word;
		wMilliseconds: Word;
	end;
	PSecurityAttributes =^_SECURITY_ATTRIBUTES;
	_SECURITY_ATTRIBUTES = record
		nLength     : DWORD;
		lpSecurityDescriptor: Pointer;
		bInheritHandle: BOOL;
	end;
	LongRec        = packed record
		case Integer of
			0: (Lo, Hi: Word);
			1: (Words: array [0..1] of Word);
			2: (Bytes: array [0..3] of Byte);
	end;
	POverlapped    = ^_OVERLAPPED;
	_OVERLAPPED    = record
		Internal     : DWORD;
		InternalHigh : DWORD;
		Offset       : DWORD;
		OffsetHigh   : DWORD;
		hEvent       : THandle;
	end;
	PDeviceMode    =^_devicemodeA;
	_devicemodeA   = record
		dmDeviceName : array[0..CCHDEVICENAME - 1] of AnsiChar;
		dmSpecVersion: Word;
		dmDriverVersion: Word;
		dmSize       : Word;
		dmDriverExtra: Word;
		dmFields     : DWORD;
		dmOrientation: SHORT;
		dmPaperSize  : SHORT;
		dmPaperLength: SHORT;
		dmPaperWidth : SHORT;
		dmScale      : SHORT;
		dmCopies     : SHORT;
		dmDefaultSource: SHORT;
		dmPrintQuality: SHORT;
		dmColor      : SHORT;
		dmDuplex     : SHORT;
		dmYResolution: SHORT;
		dmTTOption   : SHORT;
		dmCollate    : SHORT;
		dmFormName   : array[0..CCHFORMNAME - 1] of AnsiChar;
		dmLogPixels  : Word;
		dmBitsPerPel : DWORD;
		dmPelsWidth  : DWORD;
		dmPelsHeight : DWORD;
		dmDisplayFlags: DWORD;
		dmDisplayFrequency: DWORD;
		dmICMMethod  : DWORD;
		dmICMIntent  : DWORD;
		dmMediaType  : DWORD;
		dmDitherType : DWORD;
		dmICCManufacturer: DWORD;
		dmICCModel   : DWORD;
		dmPanningWidth: DWORD;
		dmPanningHeight: DWORD;
	end;
	PPixelFormat   =^TPixelFormat;
	TPixelFormat   = packed record
		nSize: Word;
		nVersion: Word;
		dwFlags: DWORD;
		iPixelType: Byte;
		cColorBits: Byte;
		cRedBits: Byte;
		cRedShift: Byte;
		cGreenBits: Byte;
		cGreenShift: Byte;
		cBlueBits: Byte;
		cBlueShift: Byte;
		cAlphaBits: Byte;
		cAlphaShift: Byte;
		cAccumBits: Byte;
		cAccumRedBits: Byte;
		cAccumGreenBits: Byte;
		cAccumBlueBits: Byte;
		cAccumAlphaBits: Byte;
		cDepthBits: Byte;
		cStencilBits: Byte;
		cAuxBuffers: Byte;
		iLayerType: Byte;
		bReserved: Byte;
		dwLayerMask: DWORD;
		dwVisibleMask: DWORD;
		dwDamageMask: DWORD;
	end;
	PListEntry = ^TListEntry;
	_LIST_ENTRY = record
		Flink: PListEntry;
		Blink: PListEntry;
	end;
	TListEntry = _LIST_ENTRY;
	LIST_ENTRY = _LIST_ENTRY;
	PRTLCriticalSection = ^TRTLCriticalSection;
	PRTLCriticalSectionDebug = ^TRTLCriticalSectionDebug;
	_RTL_CRITICAL_SECTION_DEBUG = record
		Type_18: Word;
		CreatorBackTraceIndex: Word;
		CriticalSection: PRTLCriticalSection;
		ProcessLocksList: TListEntry;
		EntryCount: DWORD;
		ContentionCount: DWORD;
		Spare: array[0..1] of DWORD;
	end;
	TRTLCriticalSectionDebug = _RTL_CRITICAL_SECTION_DEBUG;
	RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;

	_RTL_CRITICAL_SECTION = record
		DebugInfo: PRTLCriticalSectionDebug;
		LockCount: Longint;
		RecursionCount: Longint;
		OwningThread: THandle;
		LockSemaphore: THandle;
		Reserved: DWORD;
	end;
	TRTLCriticalSection = _RTL_CRITICAL_SECTION;
	RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION;
  PMemoryBasicInformation = ^TMemoryBasicInformation;
  _MEMORY_BASIC_INFORMATION = record
    BaseAddress : Pointer;
    AllocationBase : Pointer;
    AllocationProtect : DWORD;
    RegionSize : DWORD;
    State : DWORD;
    Protect : DWORD;
    Type_9 : DWORD;
  end;
  {$EXTERNALSYM _MEMORY_BASIC_INFORMATION}
  TMemoryBasicInformation = _MEMORY_BASIC_INFORMATION;
  MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION;
  PPaintStruct = ^TPaintStruct;
  {$EXTERNALSYM tagPAINTSTRUCT}
  tagPAINTSTRUCT = packed record
    hdc: HDC;
    fErase: BOOL;
    rcPaint: TRect;
    fRestore: BOOL;
    fIncUpdate: BOOL;
    rgbReserved: array[0..31] of Byte;
  end;
  TPaintStruct = tagPAINTSTRUCT;
  {$EXTERNALSYM PAINTSTRUCT}
  PAINTSTRUCT = tagPAINTSTRUCT;
	TSIZE = record
    cx: Longint;
    cy: Longint;
  end;
  PPaletteEntry = ^TPaletteEntry;
  {$EXTERNALSYM tagPALETTEENTRY}
  tagPALETTEENTRY = packed record
    peRed: Byte;
    peGreen: Byte;
    peBlue: Byte;
    peFlags: Byte;
  end;
  TPaletteEntry = tagPALETTEENTRY;
  {$EXTERNALSYM PALETTEENTRY}
  PALETTEENTRY = tagPALETTEENTRY;


  { Logical Palette }
  PLogPalette = ^TLogPalette;
  {$EXTERNALSYM tagLOGPALETTE}
  tagLOGPALETTE = packed record
    palVersion: Word;
    palNumEntries: Word;
    palPalEntry: array[0..0] of TPaletteEntry;
  end;
  TLogPalette = tagLOGPALETTE;
  {$EXTERNALSYM LOGPALETTE}
  LOGPALETTE = tagLOGPALETTE;

  PMaxLogPalette = ^TMaxLogPalette; // not in Windows Headers
  TMaxLogPalette = packed record
    palVersion: Word;
    palNumEntries: Word;
    palPalEntry: array [Byte] of TPaletteEntry;
  end;

type
	TObjMethod     = procedure(Sender: TObject);
	TProcedure     = procedure;
	TKBCallBack    = procedure (Key: Char);
	TCommandProc   = procedure (ID: AnsiString);
	TKeyCallBack   = function (Key: Char): Boolean of object;
	TMouseCallback = function (Msg: Cardinal; lParam, wParam: Integer): Boolean of object;


const
	user32   = 'user32.dll';
	kernel32 = 'kernel32.dll';
	gdi32    = 'gdi32.dll';
	opengl32 = 'opengl32.dll';


function DefWindowProc(hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT; stdcall;
function RegisterClass(const lpWndClass: TWndClass): ATOM; stdcall;
function GetClassInfo(hInstance: HINST; lpClassName: PAnsiChar; var lpWndClass: TWndClass): BOOL; stdcall;
function CreateWindowEx(dwExStyle: DWORD; lpClassName: PChar;
	lpWindowName: PChar; dwStyle: DWORD; X, Y, nWidth, nHeight: Integer;
	hWndParent: HWND; hMenu: HMENU; hInstance: HINST; lpParam: Pointer): HWND;
	stdcall;
function GetTickCount: DWORD; stdcall;
function PeekMessage(var lpMsg: TMsg; hWnd: HWND;
	wMsgFilterMin, wMsgFilterMax, wRemoveMsg: UINT): BOOL; stdcall;

function MessageBox(hWnd: HWND; lpText, lpCaption: PAnsiChar; uType: UINT): Integer; stdcall;
function DispatchMessage(const lpMsg: TMsg): Longint; stdcall;
function TranslateMessage(const lpMsg: TMsg): BOOL; stdcall;
function PostMessage(hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): BOOL; stdcall;
procedure PostQuitMessage(nExitCode: Integer); stdcall;
function SendMessage(hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM): LRESULT; stdcall;

//function GetDC(hWnd: HWND): HDC; stdcall;
//function ReleaseDC(hWnd: HWND; hDC: HDC): Integer; stdcall;
//function SwapBuffers(DC: HDC): BOOL; stdcall;
function GetKeyState(nVirtKey: Integer): SHORT; stdcall;
function GetKeyboardState(var KeyState: TKeyboardState): BOOL; stdcall;
function AnsiToOem(const lpszSrc: PAnsiChar; lpszDst: PAnsiChar): BOOL; stdcall;

{/// Windows API ///}

function wglCreateContext(DC: HDC): HGLRC; stdcall;
function wglMakeCurrent(DC: HDC; p2: HGLRC): BOOL; stdcall;
function wglGetCurrentDC: HDC; stdcall;
function wglDeleteContext(p1: HGLRC): BOOL; stdcall;
function ChoosePixelFormat(DC: HDC; p2: PPixelFormat): Integer; stdcall;
function SetPixelFormat(DC: HDC; PixelFormat: Integer; FormatDef: PPixelFormat): BOOL; stdcall;
function GetPixelFormat(DC: HDC): Integer; stdcall;
function DescribePixelFormat(DC: HDC; p2: Integer; p3: UINT; var p4: TPixelFormat): BOOL; stdcall;
function ScreenToClient(hWnd: HWND; var lpPoint: TPoint): BOOL; stdcall;
function ClientToScreen(hWnd: HWND; var lpPoint: TPoint): BOOL; stdcall;
function SetCursorPos(X, Y: Integer): BOOL; stdcall;
function GetClientRect(hWnd: HWND; var lpRect: TRect): BOOL; stdcall;
function GetParent(hWnd: HWND): HWND; stdcall;
function SetWindowPos(hWnd: HWND; hWndInsertAfter: HWND; X, Y, cx, cy: Integer; uFlags: UINT): BOOL; stdcall;
function ShowCursor(bShow: BOOL): Integer; stdcall;
function ShowWindow(hWnd: HWND; nCmdShow: Integer): BOOL; stdcall;
function SetFocus(hWnd: HWND): HWND; stdcall;
function GetFocus: HWND; stdcall;
function ChangeDisplaySettings(lpDevMode: PDeviceMode; dwFlags: DWORD): Longint; stdcall;
procedure GetLocalTime(var lpSystemTime: TSystemTime); stdcall;
function SetParent(hWndChild, hWndNewParent: HWND): HWND; stdcall;
function LoadCursor(hInstance: HINST; lpCursorName: PAnsiChar): HCURSOR; stdcall;
function LoadIcon(hInstance: HINST; lpIconName: PChar): HICON; stdcall;
function LoadLibrary(lpLibFileName: PChar): HMODULE; stdcall;
function FreeLibrary(hLibModule: HMODULE): BOOL; stdcall;
function GetModuleHandle(lpModuleName: PChar): HMODULE; stdcall;
function GetProcAddress(hModule: HMODULE; lpProcName: PAnsiChar): Pointer; stdcall;
function SetWindowLong(hWnd: HWND; nIndex: Integer; dwNewLong: Longint): Longint; stdcall;
function DestroyWindow(hWnd: HWND): BOOL; stdcall;

procedure GetSystemTime(var lpSystemTime: TSystemTime); stdcall;

function MoveFile(lpExistingFileName, lpNewFileName: PChar): BOOL; stdcall;
function DeleteFile(lpFileName: PChar): BOOL; stdcall;
function SetCurrentDirectory(lpPathName: PChar): BOOL; stdcall;

function GetDesktopWindow: HWND; stdcall;
//function ValidateRect(hWnd: HWND; lpRect: PRect): BOOL; stdcall;
function GetCursorPos(var lpPoint: TPoint): BOOL; stdcall;
function SetCapture(hWnd: HWND): HWND; stdcall;
function ReleaseCapture: BOOL; stdcall;

function lstrcmpi(lpString1, lpString2: PAnsiChar): Integer; stdcall;

{/// GDI ///}
//function ExcludeClipRect(DC: HDC; LeftRect, TopRect, RightRect, BottomRect: Integer): Integer; stdcall;
//function GetStockObject(Index: Integer): HGDIOBJ; stdcall;
//function DeleteObject(p1: THandle): BOOL; stdcall;
//function SetDIBits(DC: HDC; Bitmap: HBITMAP; StartScan, NumScans: UINT; Bits: Pointer; var BitsInfo: TBitmapInfo; Usage: UINT): Integer; stdcall;
//function CreateCompatibleDC(DC: HDC): HDC; stdcall;
//function CreateCompatibleBitmap(DC: HDC; Width, Height: Integer): HBITMAP; stdcall;
//function SelectObject(DC: HDC; p2: THandle): THandle; stdcall;
//function Rectangle(DC: HDC; X1, Y1, X2, Y2: Integer): BOOL; stdcall;
//function SetBkColor(DC: HDC; Color: Cardinal): Cardinal; stdcall;
//function SetBkMode(DC: HDC; BkMode: Integer): Integer; stdcall;
//function SetTextColor(DC: HDC; Color: Cardinal): Cardinal; stdcall;
//function BitBlt(DestDC: HDC; X, Y, Width, Height: Integer; SrcDC: HDC;
//	XSrc, YSrc: Integer; Rop: DWORD): BOOL; stdcall;
//function StretchBlt(DestDC: HDC; X, Y, Width, Height: Integer; SrcDC: HDC;
//  XSrc, YSrc, SrcWidth, SrcHeight: Integer; Rop: DWORD): BOOL; stdcall;
//function SetStretchBltMode(DC: HDC; StretchMode: Integer): Integer; stdcall;
//function DrawText(hDC: HDC; lpString: PChar; nCount: Integer;
//	var lpRect: TRect; uFormat: UINT): Integer; stdcall;
//function DeleteDC(DC: HDC): BOOL; stdcall;
//function CreateSolidBrush(p1: Cardinal): HBRUSH; stdcall;
//function BeginPaint(hWnd: HWND; var lpPaint: TPaintStruct): HDC; stdcall;
//function EndPaint(hWnd: HWND; const lpPaint: TPaintStruct): BOOL; stdcall;
//function GetSysColor(nIndex: Integer): DWORD; stdcall;
//function GetSysColorBrush(nIndex: Integer): HBRUSH; stdcall;
//function InvalidateRect(hWnd: HWND; const lpRect: TRect; bErase: BOOL): BOOL; stdcall;
//function CreatePen(Style, Width: Integer; Color: Cardinal): HPEN; stdcall;
//function RoundRect(DC: HDC; X1, Y1, X2, Y2, X3, Y3: Integer): BOOL; stdcall;
//function SaveDC(DC: HDC): Integer; stdcall;
//function RestoreDC(DC: HDC; SavedDC: Integer): BOOL; stdcall;
//function CreateFont(nHeight, nWidth, nEscapement, nOrientaion, fnWeight: Integer;
//	fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision,
//	fdwClipPrecision, fdwQuality, fdwPitchAndFamily: DWORD; lpszFace: PAnsiChar): HFONT; stdcall;
//function GetTextExtentPoint(DC: HDC; Str: PAnsiChar; Count: Integer;
//	var Size: TSize): BOOL; stdcall;
//function SetROP2(DC: HDC; p2: Integer): Integer; stdcall;

procedure InitializeCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
procedure EnterCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
procedure LeaveCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
function TryEnterCriticalSection(var lpCriticalSection: TRTLCriticalSection): BOOL; stdcall;
procedure DeleteCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;

function DuplicateHandle(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle: THandle;
	lpTargetHandle: PHandle; dwDesiredAccess: DWORD;
	bInheritHandle: BOOL; dwOptions: DWORD): BOOL; stdcall;
function CreateEvent(lpEventAttributes: PSecurityAttributes;
  bManualReset, bInitialState: BOOL; lpName: PChar): THandle; stdcall;
function OpenEvent(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PChar): THandle; stdcall;
function CloseHandle(hObject: THandle): BOOL; stdcall;

function SetEvent(hEvent: THandle): BOOL; stdcall;
function ResetEvent(hEvent: THandle): BOOL; stdcall;
function PulseEvent(hEvent: THandle): BOOL; stdcall;

function WaitForSingleObject(hHandle: THandle; dwMilliseconds: DWORD): DWORD; stdcall;
type
	TWOHandleArray = array[0..MAXIMUM_WAIT_OBJECTS - 1] of THandle;
	PWOHandleArray = ^TWOHandleArray;
function WaitForMultipleObjects(nCount: DWORD; lpHandles: PWOHandleArray;
	bWaitAll: BOOL; dwMilliseconds: DWORD): DWORD; stdcall;
function MsgWaitForMultipleObjects(nCount: DWORD; var pHandles;
  fWaitAll: BOOL; dwMilliseconds, dwWakeMask: DWORD): DWORD; stdcall;
procedure Sleep(dwMilliseconds: DWORD); stdcall;

function InterlockedIncrement(var Addend: Integer): Integer; stdcall;
function InterlockedDecrement(var Addend: Integer): Integer; stdcall;
function InterlockedExchange(var Target: Integer; Value: Integer): Integer; stdcall;
function InterlockedCompareExchange(var Destination: Pointer; Exchange: Pointer; Comperand: Pointer): Pointer stdcall;
function InterlockedExchangeAdd(Addend: PLongint; Value: Longint): Longint stdcall; overload;
function InterlockedExchangeAdd(var Addend: Longint; Value: Longint): Longint stdcall; overload;

function GetCurrentProcess: THandle; stdcall;
function GetCurrentProcessId: DWORD; stdcall;
function GetCurrentThread: THandle; stdcall;
function GetCurrentThreadId: DWORD; stdcall;
function SuspendThread(hThread: THandle): DWORD; stdcall;
function ResumeThread(hThread: THandle): DWORD; stdcall;
procedure ExitThread(dwExitCode: DWORD); stdcall;
function TerminateThread(hThread: THandle; dwExitCode: DWORD): BOOL; stdcall;
function GetExitCodeThread(hThread: THandle; var lpExitCode: DWORD): BOOL; stdcall;

function SetThreadPriority(hThread: THandle; nPriority: Integer): BOOL; stdcall;
function GetThreadPriority(hThread: THandle): Integer; stdcall;

function ReadConsole(hConsoleInput: THandle; lpBuffer: Pointer;
	nNumberOfCharsToRead: DWORD; var lpNumberOfCharsRead: DWORD; lpReserved: Pointer): BOOL; stdcall;

function WinExec(lpCmdLine: PAnsiChar; uCmdShow: UINT): UINT; stdcall; external kernel32 name 'WinExec';

function GetStdHandle(nStdHandle: DWORD): THandle; stdcall;
function GetModuleFileName(hModule: HINST; lpFilename: PChar; nSize: DWORD): DWORD; stdcall;

function VirtualQuery(lpAddress: Pointer; var lpBuffer: TMemoryBasicInformation; dwLength: DWORD): DWORD; stdcall;
function VirtualAlloc(lpvAddress: Pointer; dwSize, flAllocationType, flProtect: DWORD): Pointer; stdcall;
function VirtualFree(lpAddress: Pointer; dwSize, dwFreeType: DWORD): BOOL; stdcall;

//function PatBlt(DC: HDC; X, Y, Width, Height: Integer; Rop: DWORD): BOOL; stdcall;

{function CreatePalette(const LogPalette: TLogPalette): HPalette; stdcall;
function SelectPalette(DC: HDC; Palette: HPALETTE;
	ForceBackground: Bool): HPALETTE; stdcall;  }

//function MoveToEx(DC: HDC; p2, p3: Integer; p4: PPoint): BOOL; stdcall; external gdi32 name 'MoveToEx';
//function LineTo(DC: HDC; X, Y: Integer): BOOL; stdcall; external gdi32 name 'LineTo';

//function TextWidth(DC: HDC; T: AnsiString): Integer;

const
  { Predefined Clipboard Formats }
  {$EXTERNALSYM CF_TEXT}
  CF_TEXT = 1;
  {$EXTERNALSYM CF_BITMAP}
  CF_BITMAP = 2;
  {$EXTERNALSYM CF_METAFILEPICT}
  CF_METAFILEPICT = 3;
  {$EXTERNALSYM CF_SYLK}
  CF_SYLK = 4;
  {$EXTERNALSYM CF_DIF}
  CF_DIF = 5;
  {$EXTERNALSYM CF_TIFF}
  CF_TIFF = 6;
  {$EXTERNALSYM CF_OEMTEXT}
  CF_OEMTEXT = 7;
  {$EXTERNALSYM CF_DIB}
  CF_DIB = 8;
  {$EXTERNALSYM CF_PALETTE}
  CF_PALETTE = 9;
  {$EXTERNALSYM CF_PENDATA}
  CF_PENDATA = 10;
  {$EXTERNALSYM CF_RIFF}
  CF_RIFF = 11;
  {$EXTERNALSYM CF_WAVE}
  CF_WAVE = 12;
  {$EXTERNALSYM CF_UNICODETEXT}
  CF_UNICODETEXT = 13;
  {$EXTERNALSYM CF_ENHMETAFILE}
  CF_ENHMETAFILE = 14;
  {$EXTERNALSYM CF_HDROP}
  CF_HDROP = 15;
  {$EXTERNALSYM CF_LOCALE}
  CF_LOCALE = $10;
  {$EXTERNALSYM CF_MAX}
  CF_MAX = 17;
  {$EXTERNALSYM CF_DIBV5}
  CF_DIBV5 = 17;

  {$EXTERNALSYM CF_MAX_XP}
  CF_MAX_XP = 18;

  {$EXTERNALSYM CF_OWNERDISPLAY}
  CF_OWNERDISPLAY = 128;
  {$EXTERNALSYM CF_DSPTEXT}
  CF_DSPTEXT = 129;
  {$EXTERNALSYM CF_DSPBITMAP}
  CF_DSPBITMAP = 130;
  {$EXTERNALSYM CF_DSPMETAFILEPICT}
  CF_DSPMETAFILEPICT = 131;
  {$EXTERNALSYM CF_DSPENHMETAFILE}
  CF_DSPENHMETAFILE = 142;

  { "Private" formats don't get GlobalFree()'d }
  {$EXTERNALSYM CF_PRIVATEFIRST}
  CF_PRIVATEFIRST = $200;
  {$EXTERNALSYM CF_PRIVATELAST}
  CF_PRIVATELAST = 767;

  { "GDIOBJ" formats do get DeleteObject()'d }
  {$EXTERNALSYM CF_GDIOBJFIRST}
  CF_GDIOBJFIRST = 768;
  {$EXTERNALSYM CF_GDIOBJLAST}
  CF_GDIOBJLAST = 1023;

{$EXTERNALSYM OpenClipboard}
function OpenClipboard(hWndNewOwner: HWND): BOOL; stdcall;
{$EXTERNALSYM CloseClipboard}
function CloseClipboard: BOOL; stdcall;
{$EXTERNALSYM SetClipboardData}
function SetClipboardData(uFormat: UINT; hMem: THandle): THandle; stdcall;
{$EXTERNALSYM GetClipboardData}
function GetClipboardData(uFormat: UINT): THandle; stdcall;
//{$EXTERNALSYM EmptyClipboard}
//function EmptyClipboard: BOOL; stdcall;
{$EXTERNALSYM IsClipboardFormatAvailable}
function IsClipboardFormatAvailable(format: UINT): BOOL; stdcall;

const
  { Global Memory Flags }

  GMEM_FIXED = 0;
  {$EXTERNALSYM GMEM_FIXED}
  GMEM_MOVEABLE = 2;
  {$EXTERNALSYM GMEM_MOVEABLE}
  GMEM_NOCOMPACT = $10;
  {$EXTERNALSYM GMEM_NOCOMPACT}
  GMEM_NODISCARD = $20;
  {$EXTERNALSYM GMEM_NODISCARD}
  GMEM_ZEROINIT = $40;
  {$EXTERNALSYM GMEM_ZEROINIT}
  GMEM_MODIFY = $80;
  {$EXTERNALSYM GMEM_MODIFY}
  GMEM_DISCARDABLE = $100;
  {$EXTERNALSYM GMEM_DISCARDABLE}
  GMEM_NOT_BANKED = $1000;
  {$EXTERNALSYM GMEM_NOT_BANKED}
  GMEM_SHARE = $2000;
  {$EXTERNALSYM GMEM_SHARE}
  GMEM_DDESHARE = $2000;
  {$EXTERNALSYM GMEM_DDESHARE}
  GMEM_NOTIFY = $4000;
  {$EXTERNALSYM GMEM_NOTIFY}
  GMEM_LOWER = GMEM_NOT_BANKED;
  {$EXTERNALSYM GMEM_LOWER}
  GMEM_VALID_FLAGS = 32626;
  {$EXTERNALSYM GMEM_VALID_FLAGS}
  GMEM_INVALID_HANDLE = $8000;
  {$EXTERNALSYM GMEM_INVALID_HANDLE}

  GHND = GMEM_MOVEABLE or GMEM_ZEROINIT;
  {$EXTERNALSYM GHND}
  GPTR = GMEM_FIXED or GMEM_ZEROINIT;
  {$EXTERNALSYM GPTR}
function GlobalAlloc(uFlags: UINT; dwBytes: DWORD): HGLOBAL; stdcall;
function GlobalLock(hMem: HGLOBAL): Pointer; stdcall;
function GlobalUnlock(hMem: HGLOBAL): BOOL; stdcall;
function GlobalFree(hMem: HGLOBAL): HGLOBAL; stdcall;

//function GetUpdateRect(hWnd: HWND; var lpRect: TRect; bErase: BOOL): BOOL; stdcall;

implementation

//function GetUpdateRect; external user32 name 'GetUpdateRect';

function GlobalAlloc; external kernel32 name 'GlobalAlloc';
function GlobalLock; external kernel32 name 'GlobalLock';
function GlobalUnlock; external kernel32 name 'GlobalUnlock';
function GlobalFree; external kernel32 name 'GlobalFree';

function OpenClipboard; external user32 name 'OpenClipboard';
function CloseClipboard; external user32 name 'CloseClipboard';
function SetClipboardData; external user32 name 'SetClipboardData';
function GetClipboardData; external user32 name 'GetClipboardData';
function IsClipboardFormatAvailable; external user32 name 'IsClipboardFormatAvailable';

{
function TextWidth(DC: HDC; T: AnsiString): Integer; inline;
var
	S: TSIZE;
begin
	GetTextExtentPoint(DC, PAnsiChar(@T[1]), Length(T), s);
	result := s.cx;
end; }

//function SelectPalette; external gdi32 name 'SelectPalette';
//function CreatePalette; stdcall; external gdi32 name 'CreatePalette';

function VirtualAlloc; external kernel32 name 'VirtualAlloc';
function VirtualQuery; external kernel32 name 'VirtualQuery';
function VirtualFree; external kernel32 name 'VirtualFree';

function GetModuleFileName; external kernel32 name 'GetModuleFileNameA';
function GetStdHandle; external kernel32 name 'GetStdHandle';

function ReadConsole; external kernel32 name 'ReadConsoleA';

function SetThreadPriority; external kernel32 name 'SetThreadPriority';
function GetThreadPriority; external kernel32 name 'GetThreadPriority';

function GetCurrentProcess; external kernel32 name 'GetCurrentProcess';
function GetCurrentProcessId; external kernel32 name 'GetCurrentProcessId';
function GetCurrentThread; external kernel32 name 'GetCurrentThread';
function GetCurrentThreadId; external kernel32 name 'GetCurrentThreadId';
function SuspendThread; external kernel32 name 'SuspendThread';
function ResumeThread; external kernel32 name 'ResumeThread';
procedure ExitThread; external kernel32 name 'ExitThread';
function TerminateThread; external kernel32 name 'TerminateThread';
function GetExitCodeThread; external kernel32 name 'GetExitCodeThread';

function InterlockedCompareExchange; external kernel32 name 'InterlockedCompareExchange';
function InterlockedDecrement; external kernel32 name 'InterlockedDecrement';
function InterlockedExchange; external kernel32 name 'InterlockedExchange';
function InterlockedExchangeAdd(Addend: PLongint; Value: Longint): Longint; external kernel32 name 'InterlockedExchangeAdd';
function InterlockedExchangeAdd(var Addend: Longint; Value: Longint): Longint; external kernel32 name 'InterlockedExchangeAdd';
function InterlockedIncrement; external kernel32 name 'InterlockedIncrement';

function DuplicateHandle; external kernel32 name 'DuplicateHandle';
function CloseHandle; external kernel32 name 'CloseHandle';
function CreateEvent; external kernel32 name 'CreateEventA';
function OpenEvent; external kernel32 name 'OpenEventA';
function SetEvent; external kernel32 name 'SetEvent';
function ResetEvent; external kernel32 name 'ResetEvent';
function PulseEvent; external kernel32 name 'PulseEvent';
function WaitForSingleObject; external kernel32 name 'WaitForSingleObject';
function WaitForMultipleObjects; external kernel32 name 'WaitForMultipleObjects';
function MsgWaitForMultipleObjects; external user32 name 'MsgWaitForMultipleObjects';
procedure Sleep; external kernel32 name 'Sleep';

 {
function ExcludeClipRect; external gdi32 name 'ExcludeClipRect';
function CreateFont; external gdi32 name 'CreateFontA';
function GetSysColor; external user32 name 'GetSysColor';
function GetSysColorBrush; external user32 name 'GetSysColorBrush';
function BeginPaint; external user32 name 'BeginPaint';
function EndPaint; external user32 name 'EndPaint';
function DeleteDC; external gdi32 name 'DeleteDC';
function DrawText; external user32 name 'DrawTextA';
function PatBlt; external gdi32 name 'PatBlt';
function BitBlt; external gdi32 name 'BitBlt';
function StretchBlt; external gdi32 name 'StretchBlt';
function SetStretchBltMode; external gdi32 name 'SetStretchBltMode';
function SelectObject; external gdi32 name 'SelectObject';
function Rectangle; external gdi32 name 'Rectangle';
function SetBkColor; external gdi32 name 'SetBkColor';
function SetBkMode; external gdi32 name 'SetBkMode';
function SetTextColor; external gdi32 name 'SetTextColor';
function CreateCompatibleBitmap; external gdi32 name 'CreateCompatibleBitmap';
function CreateCompatibleDC; external gdi32 name 'CreateCompatibleDC';
function SetDIBits; external gdi32 name 'SetDIBits';
function GetStockObject; external gdi32 name 'GetStockObject';
function DeleteObject; external gdi32 name 'DeleteObject';
function CreateSolidBrush; external gdi32 name 'CreateSolidBrush';
function InvalidateRect; external user32 name 'InvalidateRect';
function CreatePen; external gdi32 name 'CreatePen';
function RoundRect; external gdi32 name 'RoundRect';
function RestoreDC; external gdi32 name 'RestoreDC';
function SaveDC; external gdi32 name 'SaveDC';
function GetTextExtentPoint; external gdi32 name 'GetTextExtentPointA';
function SetROP2; external gdi32 name 'SetROP2';
	}

function lstrcmpi; external kernel32 name 'lstrcmpiA';

function SetCapture; external user32 name 'SetCapture';
function ReleaseCapture; external user32 name 'ReleaseCapture';
function DefWindowProc; external user32 name 'DefWindowProcA';
function RegisterClass; external user32 name 'RegisterClassA';
function GetClassInfo; external user32 name 'GetClassInfoA';
function CreateWindowEx; external user32 name 'CreateWindowExA';
function PeekMessage; external user32 name 'PeekMessageA';
function MessageBox; external user32 name 'MessageBoxA';
function DispatchMessage; external user32 name 'DispatchMessageA';
function TranslateMessage; external user32 name 'TranslateMessage';
function PostMessage; external user32 name 'PostMessageA';
procedure PostQuitMessage; external user32 name 'PostQuitMessage';
function SendMessage; external user32 name 'SendMessageA';
//function GetDC; external user32 name 'GetDC';
//function ReleaseDC; external user32 name 'ReleaseDC';
function GetKeyState; external user32 name 'GetKeyState';
function GetKeyboardState; external user32 name 'GetKeyboardState';
function ScreenToClient; external user32 name 'ScreenToClient';
function ClientToScreen; external user32 name 'ClientToScreen';
function SetCursorPos; external user32 name 'SetCursorPos';
function GetClientRect; external user32 name 'GetClientRect';
function GetParent; external user32 name 'GetParent';
function SetWindowPos; external user32 name 'SetWindowPos';
function ShowCursor; external user32 name 'ShowCursor';
function ShowWindow; external user32 name 'ShowWindow';
function SetFocus; external user32 name 'SetFocus';
function GetFocus; external user32 name 'GetFocus';
function SetParent; external user32 name 'SetParent';
function LoadCursor; external user32 name 'LoadCursorA';
function LoadIcon; external user32 name 'LoadIconA';
function SetWindowLong; external user32 name 'SetWindowLongA';
function DestroyWindow; external user32 name 'DestroyWindow';
function GetCursorPos; external user32 name 'GetCursorPos';
function GetDesktopWindow; external user32 name 'GetDesktopWindow';
//function ValidateRect; external user32 name 'ValidateRect';
function ChangeDisplaySettings; external user32 name 'ChangeDisplaySettingsA';

function wglCreateContext; external opengl32 name 'wglCreateContext';
function wglMakeCurrent; external opengl32 name 'wglMakeCurrent';
function wglGetCurrentDC; external opengl32 name 'wglGetCurrentDC';
function wglDeleteContext; external opengl32 name 'wglDeleteContext';

function ChoosePixelFormat; external gdi32 name 'ChoosePixelFormat';
function SetPixelFormat; external gdi32 name 'SetPixelFormat';
function GetPixelFormat; external gdi32 name 'GetPixelFormat';
function DescribePixelFormat; external gdi32 name 'DescribePixelFormat';
//function SwapBuffers; external gdi32 name 'SwapBuffers';

function AnsiToOem; external user32 name 'CharToOemA';
procedure GetSystemTime; external kernel32 name 'GetSystemTime';
procedure GetLocalTime; external kernel32 name 'GetLocalTime';
function GetTickCount; external kernel32 name 'GetTickCount';
function LoadLibrary; external kernel32 name 'LoadLibraryA';
function FreeLibrary; external kernel32 name 'FreeLibrary';
function GetModuleHandle; external kernel32 name 'GetModuleHandleA';
function GetProcAddress; external kernel32 name 'GetProcAddress';
function MoveFile; external kernel32 name 'MoveFileA';
function DeleteFile; external kernel32 name 'DeleteFileA';
function SetCurrentDirectory; external kernel32 name 'SetCurrentDirectoryA';

procedure InitializeCriticalSection; external kernel32 name 'InitializeCriticalSection';
procedure EnterCriticalSection; external kernel32 name 'EnterCriticalSection';
procedure LeaveCriticalSection; external kernel32 name 'LeaveCriticalSection';
function TryEnterCriticalSection; external kernel32 name 'TryEnterCriticalSection';
procedure DeleteCriticalSection; external kernel32 name 'DeleteCriticalSection';

end.


